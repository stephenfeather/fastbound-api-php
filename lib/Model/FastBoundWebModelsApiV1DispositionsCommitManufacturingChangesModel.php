<?php
/**
 * FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change_manufacturer' => 'bool',
        'manufacturer' => 'string',
        'change_country_of_manufacture' => 'bool',
        'country_of_manufacture' => 'string',
        'change_importer' => 'bool',
        'importer' => 'string',
        'change_model' => 'bool',
        'model' => 'string',
        'change_caliber' => 'bool',
        'caliber' => 'string',
        'change_type' => 'bool',
        'type' => 'string',
        'change_barrel_length' => 'bool',
        'barrel_length' => 'double',
        'change_overall_length' => 'bool',
        'overall_length' => 'double',
        'change_condition' => 'bool',
        'condition' => 'string',
        'change_cost' => 'bool',
        'cost' => 'double',
        'change_price' => 'bool',
        'price' => 'double',
        'change_mpn' => 'bool',
        'mpn' => 'string',
        'change_upc' => 'bool',
        'upc' => 'string',
        'change_sku' => 'bool',
        'sku' => 'string',
        'change_location' => 'bool',
        'location' => 'string',
        'change_item_note' => 'bool',
        'item_note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change_manufacturer' => null,
        'manufacturer' => null,
        'change_country_of_manufacture' => null,
        'country_of_manufacture' => null,
        'change_importer' => null,
        'importer' => null,
        'change_model' => null,
        'model' => null,
        'change_caliber' => null,
        'caliber' => null,
        'change_type' => null,
        'type' => null,
        'change_barrel_length' => null,
        'barrel_length' => 'double',
        'change_overall_length' => null,
        'overall_length' => 'double',
        'change_condition' => null,
        'condition' => null,
        'change_cost' => null,
        'cost' => 'double',
        'change_price' => null,
        'price' => 'double',
        'change_mpn' => null,
        'mpn' => null,
        'change_upc' => null,
        'upc' => null,
        'change_sku' => null,
        'sku' => null,
        'change_location' => null,
        'location' => null,
        'change_item_note' => null,
        'item_note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change_manufacturer' => 'changeManufacturer',
        'manufacturer' => 'manufacturer',
        'change_country_of_manufacture' => 'changeCountryOfManufacture',
        'country_of_manufacture' => 'countryOfManufacture',
        'change_importer' => 'changeImporter',
        'importer' => 'importer',
        'change_model' => 'changeModel',
        'model' => 'model',
        'change_caliber' => 'changeCaliber',
        'caliber' => 'caliber',
        'change_type' => 'changeType',
        'type' => 'type',
        'change_barrel_length' => 'changeBarrelLength',
        'barrel_length' => 'barrelLength',
        'change_overall_length' => 'changeOverallLength',
        'overall_length' => 'overallLength',
        'change_condition' => 'changeCondition',
        'condition' => 'condition',
        'change_cost' => 'changeCost',
        'cost' => 'cost',
        'change_price' => 'changePrice',
        'price' => 'price',
        'change_mpn' => 'changeMPN',
        'mpn' => 'mpn',
        'change_upc' => 'changeUPC',
        'upc' => 'upc',
        'change_sku' => 'changeSKU',
        'sku' => 'sku',
        'change_location' => 'changeLocation',
        'location' => 'location',
        'change_item_note' => 'changeItemNote',
        'item_note' => 'itemNote'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change_manufacturer' => 'setChangeManufacturer',
        'manufacturer' => 'setManufacturer',
        'change_country_of_manufacture' => 'setChangeCountryOfManufacture',
        'country_of_manufacture' => 'setCountryOfManufacture',
        'change_importer' => 'setChangeImporter',
        'importer' => 'setImporter',
        'change_model' => 'setChangeModel',
        'model' => 'setModel',
        'change_caliber' => 'setChangeCaliber',
        'caliber' => 'setCaliber',
        'change_type' => 'setChangeType',
        'type' => 'setType',
        'change_barrel_length' => 'setChangeBarrelLength',
        'barrel_length' => 'setBarrelLength',
        'change_overall_length' => 'setChangeOverallLength',
        'overall_length' => 'setOverallLength',
        'change_condition' => 'setChangeCondition',
        'condition' => 'setCondition',
        'change_cost' => 'setChangeCost',
        'cost' => 'setCost',
        'change_price' => 'setChangePrice',
        'price' => 'setPrice',
        'change_mpn' => 'setChangeMpn',
        'mpn' => 'setMpn',
        'change_upc' => 'setChangeUpc',
        'upc' => 'setUpc',
        'change_sku' => 'setChangeSku',
        'sku' => 'setSku',
        'change_location' => 'setChangeLocation',
        'location' => 'setLocation',
        'change_item_note' => 'setChangeItemNote',
        'item_note' => 'setItemNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change_manufacturer' => 'getChangeManufacturer',
        'manufacturer' => 'getManufacturer',
        'change_country_of_manufacture' => 'getChangeCountryOfManufacture',
        'country_of_manufacture' => 'getCountryOfManufacture',
        'change_importer' => 'getChangeImporter',
        'importer' => 'getImporter',
        'change_model' => 'getChangeModel',
        'model' => 'getModel',
        'change_caliber' => 'getChangeCaliber',
        'caliber' => 'getCaliber',
        'change_type' => 'getChangeType',
        'type' => 'getType',
        'change_barrel_length' => 'getChangeBarrelLength',
        'barrel_length' => 'getBarrelLength',
        'change_overall_length' => 'getChangeOverallLength',
        'overall_length' => 'getOverallLength',
        'change_condition' => 'getChangeCondition',
        'condition' => 'getCondition',
        'change_cost' => 'getChangeCost',
        'cost' => 'getCost',
        'change_price' => 'getChangePrice',
        'price' => 'getPrice',
        'change_mpn' => 'getChangeMpn',
        'mpn' => 'getMpn',
        'change_upc' => 'getChangeUpc',
        'upc' => 'getUpc',
        'change_sku' => 'getChangeSku',
        'sku' => 'getSku',
        'change_location' => 'getChangeLocation',
        'location' => 'getLocation',
        'change_item_note' => 'getChangeItemNote',
        'item_note' => 'getItemNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change_manufacturer'] = isset($data['change_manufacturer']) ? $data['change_manufacturer'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['change_country_of_manufacture'] = isset($data['change_country_of_manufacture']) ? $data['change_country_of_manufacture'] : null;
        $this->container['country_of_manufacture'] = isset($data['country_of_manufacture']) ? $data['country_of_manufacture'] : null;
        $this->container['change_importer'] = isset($data['change_importer']) ? $data['change_importer'] : null;
        $this->container['importer'] = isset($data['importer']) ? $data['importer'] : null;
        $this->container['change_model'] = isset($data['change_model']) ? $data['change_model'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['change_caliber'] = isset($data['change_caliber']) ? $data['change_caliber'] : null;
        $this->container['caliber'] = isset($data['caliber']) ? $data['caliber'] : null;
        $this->container['change_type'] = isset($data['change_type']) ? $data['change_type'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['change_barrel_length'] = isset($data['change_barrel_length']) ? $data['change_barrel_length'] : null;
        $this->container['barrel_length'] = isset($data['barrel_length']) ? $data['barrel_length'] : null;
        $this->container['change_overall_length'] = isset($data['change_overall_length']) ? $data['change_overall_length'] : null;
        $this->container['overall_length'] = isset($data['overall_length']) ? $data['overall_length'] : null;
        $this->container['change_condition'] = isset($data['change_condition']) ? $data['change_condition'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['change_cost'] = isset($data['change_cost']) ? $data['change_cost'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['change_price'] = isset($data['change_price']) ? $data['change_price'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['change_mpn'] = isset($data['change_mpn']) ? $data['change_mpn'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['change_upc'] = isset($data['change_upc']) ? $data['change_upc'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['change_sku'] = isset($data['change_sku']) ? $data['change_sku'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['change_location'] = isset($data['change_location']) ? $data['change_location'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['change_item_note'] = isset($data['change_item_note']) ? $data['change_item_note'] : null;
        $this->container['item_note'] = isset($data['item_note']) ? $data['item_note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change_manufacturer
     *
     * @return bool
     */
    public function getChangeManufacturer()
    {
        return $this->container['change_manufacturer'];
    }

    /**
     * Sets change_manufacturer
     *
     * @param bool $change_manufacturer If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Manufacturer is required.
     *
     * @return $this
     */
    public function setChangeManufacturer($change_manufacturer)
    {
        $this->container['change_manufacturer'] = $change_manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer Text to append to each item's existing Manufacturer. Must not start with a forward slash ('/').
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets change_country_of_manufacture
     *
     * @return bool
     */
    public function getChangeCountryOfManufacture()
    {
        return $this->container['change_country_of_manufacture'];
    }

    /**
     * Sets change_country_of_manufacture
     *
     * @param bool $change_country_of_manufacture If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.CountryOfManufacture is required.
     *
     * @return $this
     */
    public function setChangeCountryOfManufacture($change_country_of_manufacture)
    {
        $this->container['change_country_of_manufacture'] = $change_country_of_manufacture;

        return $this;
    }

    /**
     * Gets country_of_manufacture
     *
     * @return string
     */
    public function getCountryOfManufacture()
    {
        return $this->container['country_of_manufacture'];
    }

    /**
     * Sets country_of_manufacture
     *
     * @param string $country_of_manufacture Text to append to each item's existing Country of Manufacture.
     *
     * @return $this
     */
    public function setCountryOfManufacture($country_of_manufacture)
    {
        $this->container['country_of_manufacture'] = $country_of_manufacture;

        return $this;
    }

    /**
     * Gets change_importer
     *
     * @return bool
     */
    public function getChangeImporter()
    {
        return $this->container['change_importer'];
    }

    /**
     * Sets change_importer
     *
     * @param bool $change_importer If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Importer is required.
     *
     * @return $this
     */
    public function setChangeImporter($change_importer)
    {
        $this->container['change_importer'] = $change_importer;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return string
     */
    public function getImporter()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param string $importer New Importer value to use on each manufactured item.
     *
     * @return $this
     */
    public function setImporter($importer)
    {
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets change_model
     *
     * @return bool
     */
    public function getChangeModel()
    {
        return $this->container['change_model'];
    }

    /**
     * Sets change_model
     *
     * @param bool $change_model If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Model is required.
     *
     * @return $this
     */
    public function setChangeModel($change_model)
    {
        $this->container['change_model'] = $change_model;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model New Model value to use on each manufactured item.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets change_caliber
     *
     * @return bool
     */
    public function getChangeCaliber()
    {
        return $this->container['change_caliber'];
    }

    /**
     * Sets change_caliber
     *
     * @param bool $change_caliber If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Caliber is required.
     *
     * @return $this
     */
    public function setChangeCaliber($change_caliber)
    {
        $this->container['change_caliber'] = $change_caliber;

        return $this;
    }

    /**
     * Gets caliber
     *
     * @return string
     */
    public function getCaliber()
    {
        return $this->container['caliber'];
    }

    /**
     * Sets caliber
     *
     * @param string $caliber New Caliber value to use on each manufactured item.
     *
     * @return $this
     */
    public function setCaliber($caliber)
    {
        $this->container['caliber'] = $caliber;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return bool
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param bool $change_type If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Type is required.
     *
     * @return $this
     */
    public function setChangeType($change_type)
    {
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type New Type value to use on each manufactured item.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets change_barrel_length
     *
     * @return bool
     */
    public function getChangeBarrelLength()
    {
        return $this->container['change_barrel_length'];
    }

    /**
     * Sets change_barrel_length
     *
     * @param bool $change_barrel_length If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.BarrelLength is required.
     *
     * @return $this
     */
    public function setChangeBarrelLength($change_barrel_length)
    {
        $this->container['change_barrel_length'] = $change_barrel_length;

        return $this;
    }

    /**
     * Gets barrel_length
     *
     * @return double
     */
    public function getBarrelLength()
    {
        return $this->container['barrel_length'];
    }

    /**
     * Sets barrel_length
     *
     * @param double $barrel_length New Barrel Length value to use on each manufactured item.
     *
     * @return $this
     */
    public function setBarrelLength($barrel_length)
    {
        $this->container['barrel_length'] = $barrel_length;

        return $this;
    }

    /**
     * Gets change_overall_length
     *
     * @return bool
     */
    public function getChangeOverallLength()
    {
        return $this->container['change_overall_length'];
    }

    /**
     * Sets change_overall_length
     *
     * @param bool $change_overall_length If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.OverallLength is required.
     *
     * @return $this
     */
    public function setChangeOverallLength($change_overall_length)
    {
        $this->container['change_overall_length'] = $change_overall_length;

        return $this;
    }

    /**
     * Gets overall_length
     *
     * @return double
     */
    public function getOverallLength()
    {
        return $this->container['overall_length'];
    }

    /**
     * Sets overall_length
     *
     * @param double $overall_length New Overall Length value to use on each manufactured item.
     *
     * @return $this
     */
    public function setOverallLength($overall_length)
    {
        $this->container['overall_length'] = $overall_length;

        return $this;
    }

    /**
     * Gets change_condition
     *
     * @return bool
     */
    public function getChangeCondition()
    {
        return $this->container['change_condition'];
    }

    /**
     * Sets change_condition
     *
     * @param bool $change_condition If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Condition is required.
     *
     * @return $this
     */
    public function setChangeCondition($change_condition)
    {
        $this->container['change_condition'] = $change_condition;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition New Condition value to use on each manufactured item.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets change_cost
     *
     * @return bool
     */
    public function getChangeCost()
    {
        return $this->container['change_cost'];
    }

    /**
     * Sets change_cost
     *
     * @param bool $change_cost If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Cost is required.
     *
     * @return $this
     */
    public function setChangeCost($change_cost)
    {
        $this->container['change_cost'] = $change_cost;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost New Cost value to use on each manufactured item.
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets change_price
     *
     * @return bool
     */
    public function getChangePrice()
    {
        return $this->container['change_price'];
    }

    /**
     * Sets change_price
     *
     * @param bool $change_price If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Price is required.
     *
     * @return $this
     */
    public function setChangePrice($change_price)
    {
        $this->container['change_price'] = $change_price;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price New Price value to use on each manufactured item.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets change_mpn
     *
     * @return bool
     */
    public function getChangeMpn()
    {
        return $this->container['change_mpn'];
    }

    /**
     * Sets change_mpn
     *
     * @param bool $change_mpn If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.MPN is required.
     *
     * @return $this
     */
    public function setChangeMpn($change_mpn)
    {
        $this->container['change_mpn'] = $change_mpn;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn New MPN value to use on each manufactured item.
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets change_upc
     *
     * @return bool
     */
    public function getChangeUpc()
    {
        return $this->container['change_upc'];
    }

    /**
     * Sets change_upc
     *
     * @param bool $change_upc If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.UPC is required.
     *
     * @return $this
     */
    public function setChangeUpc($change_upc)
    {
        $this->container['change_upc'] = $change_upc;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc New UPC value to use on each manufactured item.
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets change_sku
     *
     * @return bool
     */
    public function getChangeSku()
    {
        return $this->container['change_sku'];
    }

    /**
     * Sets change_sku
     *
     * @param bool $change_sku If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.SKU is required.
     *
     * @return $this
     */
    public function setChangeSku($change_sku)
    {
        $this->container['change_sku'] = $change_sku;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku New SKU value to use on each manufactured item.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets change_location
     *
     * @return bool
     */
    public function getChangeLocation()
    {
        return $this->container['change_location'];
    }

    /**
     * Sets change_location
     *
     * @param bool $change_location If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.Location is required.
     *
     * @return $this
     */
    public function setChangeLocation($change_location)
    {
        $this->container['change_location'] = $change_location;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location New Location value to use on each manufactured item.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets change_item_note
     *
     * @return bool
     */
    public function getChangeItemNote()
    {
        return $this->container['change_item_note'];
    }

    /**
     * Sets change_item_note
     *
     * @param bool $change_item_note If true, FastBound.Web.Models.Api.V1.Dispositions.CommitManufacturingChangesModel.ItemNote is required.
     *
     * @return $this
     */
    public function setChangeItemNote($change_item_note)
    {
        $this->container['change_item_note'] = $change_item_note;

        return $this;
    }

    /**
     * Gets item_note
     *
     * @return string
     */
    public function getItemNote()
    {
        return $this->container['item_note'];
    }

    /**
     * Sets item_note
     *
     * @param string $item_note New Item Note to add to each manufactured item.
     *
     * @return $this
     */
    public function setItemNote($item_note)
    {
        $this->container['item_note'] = $item_note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
