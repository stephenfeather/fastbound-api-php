<?php
/**
 * FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandCreateAndCommitContactModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandCreateAndCommitContactModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandCreateAndCommitContactModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Acquisitions.CreateAndCommitAcquisition+Command+CreateAndCommitContactModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_id' => 'string',
        'ffl_number' => 'string',
        'ffl_expires' => '\DateTime',
        'lookup_ffl' => 'bool',
        'license_name' => 'string',
        'trade_name' => 'string',
        'sotein' => 'string',
        'sot_class' => 'string',
        'business_type' => 'string',
        'organization_name' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'last_name' => 'string',
        'premise_address1' => 'string',
        'premise_address2' => 'string',
        'premise_city' => 'string',
        'premise_county' => 'string',
        'premise_state' => 'string',
        'premise_zip_code' => 'string',
        'premise_country' => 'string',
        'phone_number' => 'string',
        'fax' => 'string',
        'email_address' => 'string',
        'is_archived' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_id' => null,
        'ffl_number' => null,
        'ffl_expires' => 'date-time',
        'lookup_ffl' => null,
        'license_name' => null,
        'trade_name' => null,
        'sotein' => null,
        'sot_class' => null,
        'business_type' => null,
        'organization_name' => null,
        'first_name' => null,
        'middle_name' => null,
        'last_name' => null,
        'premise_address1' => null,
        'premise_address2' => null,
        'premise_city' => null,
        'premise_county' => null,
        'premise_state' => null,
        'premise_zip_code' => null,
        'premise_country' => null,
        'phone_number' => null,
        'fax' => null,
        'email_address' => null,
        'is_archived' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'externalId',
        'ffl_number' => 'fflNumber',
        'ffl_expires' => 'fflExpires',
        'lookup_ffl' => 'lookupFFL',
        'license_name' => 'licenseName',
        'trade_name' => 'tradeName',
        'sotein' => 'sotein',
        'sot_class' => 'sotClass',
        'business_type' => 'businessType',
        'organization_name' => 'organizationName',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'last_name' => 'lastName',
        'premise_address1' => 'premiseAddress1',
        'premise_address2' => 'premiseAddress2',
        'premise_city' => 'premiseCity',
        'premise_county' => 'premiseCounty',
        'premise_state' => 'premiseState',
        'premise_zip_code' => 'premiseZipCode',
        'premise_country' => 'premiseCountry',
        'phone_number' => 'phoneNumber',
        'fax' => 'fax',
        'email_address' => 'emailAddress',
        'is_archived' => 'isArchived'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_id' => 'setExternalId',
        'ffl_number' => 'setFflNumber',
        'ffl_expires' => 'setFflExpires',
        'lookup_ffl' => 'setLookupFfl',
        'license_name' => 'setLicenseName',
        'trade_name' => 'setTradeName',
        'sotein' => 'setSotein',
        'sot_class' => 'setSotClass',
        'business_type' => 'setBusinessType',
        'organization_name' => 'setOrganizationName',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'last_name' => 'setLastName',
        'premise_address1' => 'setPremiseAddress1',
        'premise_address2' => 'setPremiseAddress2',
        'premise_city' => 'setPremiseCity',
        'premise_county' => 'setPremiseCounty',
        'premise_state' => 'setPremiseState',
        'premise_zip_code' => 'setPremiseZipCode',
        'premise_country' => 'setPremiseCountry',
        'phone_number' => 'setPhoneNumber',
        'fax' => 'setFax',
        'email_address' => 'setEmailAddress',
        'is_archived' => 'setIsArchived'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'ffl_number' => 'getFflNumber',
        'ffl_expires' => 'getFflExpires',
        'lookup_ffl' => 'getLookupFfl',
        'license_name' => 'getLicenseName',
        'trade_name' => 'getTradeName',
        'sotein' => 'getSotein',
        'sot_class' => 'getSotClass',
        'business_type' => 'getBusinessType',
        'organization_name' => 'getOrganizationName',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'last_name' => 'getLastName',
        'premise_address1' => 'getPremiseAddress1',
        'premise_address2' => 'getPremiseAddress2',
        'premise_city' => 'getPremiseCity',
        'premise_county' => 'getPremiseCounty',
        'premise_state' => 'getPremiseState',
        'premise_zip_code' => 'getPremiseZipCode',
        'premise_country' => 'getPremiseCountry',
        'phone_number' => 'getPhoneNumber',
        'fax' => 'getFax',
        'email_address' => 'getEmailAddress',
        'is_archived' => 'getIsArchived'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SOT_CLASS_IMPORTER = 'Importer';
    const SOT_CLASS_MANUFACTURER = 'Manufacturer';
    const SOT_CLASS_DEALER = 'Dealer';
    const BUSINESS_TYPE_SOLE_PROPRIETOR = 'SoleProprietor';
    const BUSINESS_TYPE_PARTNERSHIP = 'Partnership';
    const BUSINESS_TYPE_CORPORATION = 'Corporation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSotClassAllowableValues()
    {
        return [
            self::SOT_CLASS_IMPORTER,
            self::SOT_CLASS_MANUFACTURER,
            self::SOT_CLASS_DEALER,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBusinessTypeAllowableValues()
    {
        return [
            self::BUSINESS_TYPE_SOLE_PROPRIETOR,
            self::BUSINESS_TYPE_PARTNERSHIP,
            self::BUSINESS_TYPE_CORPORATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['ffl_number'] = isset($data['ffl_number']) ? $data['ffl_number'] : null;
        $this->container['ffl_expires'] = isset($data['ffl_expires']) ? $data['ffl_expires'] : null;
        $this->container['lookup_ffl'] = isset($data['lookup_ffl']) ? $data['lookup_ffl'] : null;
        $this->container['license_name'] = isset($data['license_name']) ? $data['license_name'] : null;
        $this->container['trade_name'] = isset($data['trade_name']) ? $data['trade_name'] : null;
        $this->container['sotein'] = isset($data['sotein']) ? $data['sotein'] : null;
        $this->container['sot_class'] = isset($data['sot_class']) ? $data['sot_class'] : null;
        $this->container['business_type'] = isset($data['business_type']) ? $data['business_type'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['premise_address1'] = isset($data['premise_address1']) ? $data['premise_address1'] : null;
        $this->container['premise_address2'] = isset($data['premise_address2']) ? $data['premise_address2'] : null;
        $this->container['premise_city'] = isset($data['premise_city']) ? $data['premise_city'] : null;
        $this->container['premise_county'] = isset($data['premise_county']) ? $data['premise_county'] : null;
        $this->container['premise_state'] = isset($data['premise_state']) ? $data['premise_state'] : null;
        $this->container['premise_zip_code'] = isset($data['premise_zip_code']) ? $data['premise_zip_code'] : null;
        $this->container['premise_country'] = isset($data['premise_country']) ? $data['premise_country'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['is_archived'] = isset($data['is_archived']) ? $data['is_archived'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSotClassAllowableValues();
        if (!is_null($this->container['sot_class']) && !in_array($this->container['sot_class'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sot_class', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($this->container['business_type']) && !in_array($this->container['business_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'business_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets ffl_number
     *
     * @return string
     */
    public function getFflNumber()
    {
        return $this->container['ffl_number'];
    }

    /**
     * Sets ffl_number
     *
     * @param string $ffl_number We're allowing more characters in case the caller sends a formatted FFL number with hyphens.
     *
     * @return $this
     */
    public function setFflNumber($ffl_number)
    {
        $this->container['ffl_number'] = $ffl_number;

        return $this;
    }

    /**
     * Gets ffl_expires
     *
     * @return \DateTime
     */
    public function getFflExpires()
    {
        return $this->container['ffl_expires'];
    }

    /**
     * Sets ffl_expires
     *
     * @param \DateTime $ffl_expires ffl_expires
     *
     * @return $this
     */
    public function setFflExpires($ffl_expires)
    {
        $this->container['ffl_expires'] = $ffl_expires;

        return $this;
    }

    /**
     * Gets lookup_ffl
     *
     * @return bool
     */
    public function getLookupFfl()
    {
        return $this->container['lookup_ffl'];
    }

    /**
     * Sets lookup_ffl
     *
     * @param bool $lookup_ffl lookup_ffl
     *
     * @return $this
     */
    public function setLookupFfl($lookup_ffl)
    {
        $this->container['lookup_ffl'] = $lookup_ffl;

        return $this;
    }

    /**
     * Gets license_name
     *
     * @return string
     */
    public function getLicenseName()
    {
        return $this->container['license_name'];
    }

    /**
     * Sets license_name
     *
     * @param string $license_name license_name
     *
     * @return $this
     */
    public function setLicenseName($license_name)
    {
        $this->container['license_name'] = $license_name;

        return $this;
    }

    /**
     * Gets trade_name
     *
     * @return string
     */
    public function getTradeName()
    {
        return $this->container['trade_name'];
    }

    /**
     * Sets trade_name
     *
     * @param string $trade_name trade_name
     *
     * @return $this
     */
    public function setTradeName($trade_name)
    {
        $this->container['trade_name'] = $trade_name;

        return $this;
    }

    /**
     * Gets sotein
     *
     * @return string
     */
    public function getSotein()
    {
        return $this->container['sotein'];
    }

    /**
     * Sets sotein
     *
     * @param string $sotein sotein
     *
     * @return $this
     */
    public function setSotein($sotein)
    {
        $this->container['sotein'] = $sotein;

        return $this;
    }

    /**
     * Gets sot_class
     *
     * @return string
     */
    public function getSotClass()
    {
        return $this->container['sot_class'];
    }

    /**
     * Sets sot_class
     *
     * @param string $sot_class NOTE: this is a string because the default model binder returns the field name and a blank error message  if the caller sends an invalid enum value. At least this way, they'll get a better error message.
     *
     * @return $this
     */
    public function setSotClass($sot_class)
    {
        $allowedValues = $this->getSotClassAllowableValues();
        if (!is_null($sot_class) && !in_array($sot_class, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sot_class', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sot_class'] = $sot_class;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string $business_type NOTE: this is a string because the default model binder returns the field name and a blank error message  if the caller sends an invalid enum value. At least this way, they'll get a better error message.
     *
     * @return $this
     */
    public function setBusinessType($business_type)
    {
        $allowedValues = $this->getBusinessTypeAllowableValues();
        if (!is_null($business_type) && !in_array($business_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'business_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name organization_name
     *
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name middle_name
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets premise_address1
     *
     * @return string
     */
    public function getPremiseAddress1()
    {
        return $this->container['premise_address1'];
    }

    /**
     * Sets premise_address1
     *
     * @param string $premise_address1 premise_address1
     *
     * @return $this
     */
    public function setPremiseAddress1($premise_address1)
    {
        $this->container['premise_address1'] = $premise_address1;

        return $this;
    }

    /**
     * Gets premise_address2
     *
     * @return string
     */
    public function getPremiseAddress2()
    {
        return $this->container['premise_address2'];
    }

    /**
     * Sets premise_address2
     *
     * @param string $premise_address2 premise_address2
     *
     * @return $this
     */
    public function setPremiseAddress2($premise_address2)
    {
        $this->container['premise_address2'] = $premise_address2;

        return $this;
    }

    /**
     * Gets premise_city
     *
     * @return string
     */
    public function getPremiseCity()
    {
        return $this->container['premise_city'];
    }

    /**
     * Sets premise_city
     *
     * @param string $premise_city premise_city
     *
     * @return $this
     */
    public function setPremiseCity($premise_city)
    {
        $this->container['premise_city'] = $premise_city;

        return $this;
    }

    /**
     * Gets premise_county
     *
     * @return string
     */
    public function getPremiseCounty()
    {
        return $this->container['premise_county'];
    }

    /**
     * Sets premise_county
     *
     * @param string $premise_county premise_county
     *
     * @return $this
     */
    public function setPremiseCounty($premise_county)
    {
        $this->container['premise_county'] = $premise_county;

        return $this;
    }

    /**
     * Gets premise_state
     *
     * @return string
     */
    public function getPremiseState()
    {
        return $this->container['premise_state'];
    }

    /**
     * Sets premise_state
     *
     * @param string $premise_state premise_state
     *
     * @return $this
     */
    public function setPremiseState($premise_state)
    {
        $this->container['premise_state'] = $premise_state;

        return $this;
    }

    /**
     * Gets premise_zip_code
     *
     * @return string
     */
    public function getPremiseZipCode()
    {
        return $this->container['premise_zip_code'];
    }

    /**
     * Sets premise_zip_code
     *
     * @param string $premise_zip_code premise_zip_code
     *
     * @return $this
     */
    public function setPremiseZipCode($premise_zip_code)
    {
        $this->container['premise_zip_code'] = $premise_zip_code;

        return $this;
    }

    /**
     * Gets premise_country
     *
     * @return string
     */
    public function getPremiseCountry()
    {
        return $this->container['premise_country'];
    }

    /**
     * Sets premise_country
     *
     * @param string $premise_country premise_country
     *
     * @return $this
     */
    public function setPremiseCountry($premise_country)
    {
        $this->container['premise_country'] = $premise_country;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number phone_number
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool $is_archived is_archived
     *
     * @return $this
     */
    public function setIsArchived($is_archived)
    {
        $this->container['is_archived'] = $is_archived;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
