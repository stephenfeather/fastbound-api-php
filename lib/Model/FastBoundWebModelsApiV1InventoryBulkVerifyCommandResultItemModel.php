<?php
/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultItemModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Inventory.BulkVerify+CommandResult+ItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'serial' => 'string',
        'result' => '\Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMatchResult',
        'result_text' => 'string',
        'verified_item' => '\Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel',
        'matches' => '\Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMultipleMatchModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'serial' => null,
        'result' => null,
        'result_text' => null,
        'verified_item' => null,
        'matches' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serial' => 'serial',
        'result' => 'result',
        'result_text' => 'resultText',
        'verified_item' => 'verifiedItem',
        'matches' => 'matches'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serial' => 'setSerial',
        'result' => 'setResult',
        'result_text' => 'setResultText',
        'verified_item' => 'setVerifiedItem',
        'matches' => 'setMatches'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serial' => 'getSerial',
        'result' => 'getResult',
        'result_text' => 'getResultText',
        'verified_item' => 'getVerifiedItem',
        'matches' => 'getMatches'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['serial'] = isset($data['serial']) ? $data['serial'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['result_text'] = isset($data['result_text']) ? $data['result_text'] : null;
        $this->container['verified_item'] = isset($data['verified_item']) ? $data['verified_item'] : null;
        $this->container['matches'] = isset($data['matches']) ? $data['matches'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serial
     *
     * @return string
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string $serial serial
     *
     * @return $this
     */
    public function setSerial($serial)
    {
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMatchResult
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMatchResult $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets result_text
     *
     * @return string
     */
    public function getResultText()
    {
        return $this->container['result_text'];
    }

    /**
     * Sets result_text
     *
     * @param string $result_text result_text
     *
     * @return $this
     */
    public function setResultText($result_text)
    {
        $this->container['result_text'] = $result_text;

        return $this;
    }

    /**
     * Gets verified_item
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel
     */
    public function getVerifiedItem()
    {
        return $this->container['verified_item'];
    }

    /**
     * Sets verified_item
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel $verified_item verified_item
     *
     * @return $this
     */
    public function setVerifiedItem($verified_item)
    {
        $this->container['verified_item'] = $verified_item;

        return $this;
    }

    /**
     * Gets matches
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMultipleMatchModel[]
     */
    public function getMatches()
    {
        return $this->container['matches'];
    }

    /**
     * Sets matches
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultMultipleMatchModel[] $matches matches
     *
     * @return $this
     */
    public function setMatches($matches)
    {
        $this->container['matches'] = $matches;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
