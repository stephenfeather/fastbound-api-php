<?php
/**
 * FastBoundWebModelsApiV1WebhooksCreateWebhookCommandResultCreateWehookResponseModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1WebhooksCreateWebhookCommandResultCreateWehookResponseModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1WebhooksCreateWebhookCommandResultCreateWehookResponseModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Webhooks.CreateWebhook+CommandResult+CreateWehookResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'signing_secret' => 'string',
        'name' => 'string',
        'url' => 'string',
        'description' => 'string',
        'disabled' => 'bool',
        'subscription_source' => 'string',
        'events' => 'string[]',
        'create_utc' => '\DateTime',
        'update_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'signing_secret' => null,
        'name' => null,
        'url' => null,
        'description' => null,
        'disabled' => null,
        'subscription_source' => null,
        'events' => null,
        'create_utc' => 'date-time',
        'update_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signing_secret' => 'signingSecret',
        'name' => 'name',
        'url' => 'url',
        'description' => 'description',
        'disabled' => 'disabled',
        'subscription_source' => 'subscriptionSource',
        'events' => 'events',
        'create_utc' => 'createUtc',
        'update_utc' => 'updateUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signing_secret' => 'setSigningSecret',
        'name' => 'setName',
        'url' => 'setUrl',
        'description' => 'setDescription',
        'disabled' => 'setDisabled',
        'subscription_source' => 'setSubscriptionSource',
        'events' => 'setEvents',
        'create_utc' => 'setCreateUtc',
        'update_utc' => 'setUpdateUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signing_secret' => 'getSigningSecret',
        'name' => 'getName',
        'url' => 'getUrl',
        'description' => 'getDescription',
        'disabled' => 'getDisabled',
        'subscription_source' => 'getSubscriptionSource',
        'events' => 'getEvents',
        'create_utc' => 'getCreateUtc',
        'update_utc' => 'getUpdateUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signing_secret'] = isset($data['signing_secret']) ? $data['signing_secret'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['subscription_source'] = isset($data['subscription_source']) ? $data['subscription_source'] : null;
        $this->container['events'] = isset($data['events']) ? $data['events'] : null;
        $this->container['create_utc'] = isset($data['create_utc']) ? $data['create_utc'] : null;
        $this->container['update_utc'] = isset($data['update_utc']) ? $data['update_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signing_secret
     *
     * @return string
     */
    public function getSigningSecret()
    {
        return $this->container['signing_secret'];
    }

    /**
     * Sets signing_secret
     *
     * @param string $signing_secret signing_secret
     *
     * @return $this
     */
    public function setSigningSecret($signing_secret)
    {
        $this->container['signing_secret'] = $signing_secret;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets subscription_source
     *
     * @return string
     */
    public function getSubscriptionSource()
    {
        return $this->container['subscription_source'];
    }

    /**
     * Sets subscription_source
     *
     * @param string $subscription_source subscription_source
     *
     * @return $this
     */
    public function setSubscriptionSource($subscription_source)
    {
        $this->container['subscription_source'] = $subscription_source;

        return $this;
    }

    /**
     * Gets events
     *
     * @return string[]
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param string[] $events events
     *
     * @return $this
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets create_utc
     *
     * @return \DateTime
     */
    public function getCreateUtc()
    {
        return $this->container['create_utc'];
    }

    /**
     * Sets create_utc
     *
     * @param \DateTime $create_utc create_utc
     *
     * @return $this
     */
    public function setCreateUtc($create_utc)
    {
        $this->container['create_utc'] = $create_utc;

        return $this;
    }

    /**
     * Gets update_utc
     *
     * @return \DateTime
     */
    public function getUpdateUtc()
    {
        return $this->container['update_utc'];
    }

    /**
     * Sets update_utc
     *
     * @param \DateTime $update_utc update_utc
     *
     * @return $this
     */
    public function setUpdateUtc($update_utc)
    {
        $this->container['update_utc'] = $update_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
