<?php
/**
 * FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommand
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommand Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommand implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Dispositions.CreateAndCommitDisposition+Command';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_type' => 'string',
        'contact_id' => 'string',
        'contact_external_id' => 'string',
        'contact' => '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandCreateAndCommitContactModel',
        'items' => '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandItemModel[]',
        'manufacturing_changes' => '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel',
        'date' => '\DateTime',
        'type' => 'string',
        'note' => 'string',
        'ttsn' => 'string',
        'generate_ttsn' => 'bool',
        'otsn' => 'string',
        'purchase_order_number' => 'string',
        'invoice_number' => 'string',
        'shipment_tracking_number' => 'string',
        'submission_date' => '\DateTime',
        'theft_loss_discovered_date' => '\DateTime',
        'theft_loss_type' => 'string',
        'theft_loss_atf_issued_incident_number' => 'string',
        'theft_loss_police_incident_number' => 'string',
        'destroyed_date' => '\DateTime',
        'destroyed_description' => 'string',
        'destroyed_witness1' => 'string',
        'destroyed_witness2' => 'string',
        'other_transferee_emails' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_type' => null,
        'contact_id' => 'uuid',
        'contact_external_id' => null,
        'contact' => null,
        'items' => null,
        'manufacturing_changes' => null,
        'date' => 'date-time',
        'type' => null,
        'note' => null,
        'ttsn' => null,
        'generate_ttsn' => null,
        'otsn' => null,
        'purchase_order_number' => null,
        'invoice_number' => null,
        'shipment_tracking_number' => null,
        'submission_date' => 'date-time',
        'theft_loss_discovered_date' => 'date-time',
        'theft_loss_type' => null,
        'theft_loss_atf_issued_incident_number' => null,
        'theft_loss_police_incident_number' => null,
        'destroyed_date' => 'date-time',
        'destroyed_description' => null,
        'destroyed_witness1' => null,
        'destroyed_witness2' => null,
        'other_transferee_emails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_type' => 'requestType',
        'contact_id' => 'contactId',
        'contact_external_id' => 'contactExternalId',
        'contact' => 'contact',
        'items' => 'items',
        'manufacturing_changes' => 'manufacturingChanges',
        'date' => 'date',
        'type' => 'type',
        'note' => 'note',
        'ttsn' => 'ttsn',
        'generate_ttsn' => 'generateTTSN',
        'otsn' => 'otsn',
        'purchase_order_number' => 'purchaseOrderNumber',
        'invoice_number' => 'invoiceNumber',
        'shipment_tracking_number' => 'shipmentTrackingNumber',
        'submission_date' => 'submissionDate',
        'theft_loss_discovered_date' => 'theftLoss_DiscoveredDate',
        'theft_loss_type' => 'theftLoss_Type',
        'theft_loss_atf_issued_incident_number' => 'theftLoss_ATFIssuedIncidentNumber',
        'theft_loss_police_incident_number' => 'theftLoss_PoliceIncidentNumber',
        'destroyed_date' => 'destroyed_Date',
        'destroyed_description' => 'destroyed_Description',
        'destroyed_witness1' => 'destroyed_Witness1',
        'destroyed_witness2' => 'destroyed_Witness2',
        'other_transferee_emails' => 'otherTransfereeEmails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_type' => 'setRequestType',
        'contact_id' => 'setContactId',
        'contact_external_id' => 'setContactExternalId',
        'contact' => 'setContact',
        'items' => 'setItems',
        'manufacturing_changes' => 'setManufacturingChanges',
        'date' => 'setDate',
        'type' => 'setType',
        'note' => 'setNote',
        'ttsn' => 'setTtsn',
        'generate_ttsn' => 'setGenerateTtsn',
        'otsn' => 'setOtsn',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'invoice_number' => 'setInvoiceNumber',
        'shipment_tracking_number' => 'setShipmentTrackingNumber',
        'submission_date' => 'setSubmissionDate',
        'theft_loss_discovered_date' => 'setTheftLossDiscoveredDate',
        'theft_loss_type' => 'setTheftLossType',
        'theft_loss_atf_issued_incident_number' => 'setTheftLossAtfIssuedIncidentNumber',
        'theft_loss_police_incident_number' => 'setTheftLossPoliceIncidentNumber',
        'destroyed_date' => 'setDestroyedDate',
        'destroyed_description' => 'setDestroyedDescription',
        'destroyed_witness1' => 'setDestroyedWitness1',
        'destroyed_witness2' => 'setDestroyedWitness2',
        'other_transferee_emails' => 'setOtherTransfereeEmails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_type' => 'getRequestType',
        'contact_id' => 'getContactId',
        'contact_external_id' => 'getContactExternalId',
        'contact' => 'getContact',
        'items' => 'getItems',
        'manufacturing_changes' => 'getManufacturingChanges',
        'date' => 'getDate',
        'type' => 'getType',
        'note' => 'getNote',
        'ttsn' => 'getTtsn',
        'generate_ttsn' => 'getGenerateTtsn',
        'otsn' => 'getOtsn',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'invoice_number' => 'getInvoiceNumber',
        'shipment_tracking_number' => 'getShipmentTrackingNumber',
        'submission_date' => 'getSubmissionDate',
        'theft_loss_discovered_date' => 'getTheftLossDiscoveredDate',
        'theft_loss_type' => 'getTheftLossType',
        'theft_loss_atf_issued_incident_number' => 'getTheftLossAtfIssuedIncidentNumber',
        'theft_loss_police_incident_number' => 'getTheftLossPoliceIncidentNumber',
        'destroyed_date' => 'getDestroyedDate',
        'destroyed_description' => 'getDestroyedDescription',
        'destroyed_witness1' => 'getDestroyedWitness1',
        'destroyed_witness2' => 'getDestroyedWitness2',
        'other_transferee_emails' => 'getOtherTransfereeEmails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REQUEST_TYPE_REGULAR = 'Regular';
    const REQUEST_TYPE_MANUFACTURING = 'Manufacturing';
    const REQUEST_TYPE_NFA = 'NFA';
    const REQUEST_TYPE_THEFT_LOSS = 'TheftLoss';
    const REQUEST_TYPE_DESTROYED = 'Destroyed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRequestTypeAllowableValues()
    {
        return [
            self::REQUEST_TYPE_REGULAR,
            self::REQUEST_TYPE_MANUFACTURING,
            self::REQUEST_TYPE_NFA,
            self::REQUEST_TYPE_THEFT_LOSS,
            self::REQUEST_TYPE_DESTROYED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_type'] = isset($data['request_type']) ? $data['request_type'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['contact_external_id'] = isset($data['contact_external_id']) ? $data['contact_external_id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['manufacturing_changes'] = isset($data['manufacturing_changes']) ? $data['manufacturing_changes'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['ttsn'] = isset($data['ttsn']) ? $data['ttsn'] : null;
        $this->container['generate_ttsn'] = isset($data['generate_ttsn']) ? $data['generate_ttsn'] : null;
        $this->container['otsn'] = isset($data['otsn']) ? $data['otsn'] : null;
        $this->container['purchase_order_number'] = isset($data['purchase_order_number']) ? $data['purchase_order_number'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['shipment_tracking_number'] = isset($data['shipment_tracking_number']) ? $data['shipment_tracking_number'] : null;
        $this->container['submission_date'] = isset($data['submission_date']) ? $data['submission_date'] : null;
        $this->container['theft_loss_discovered_date'] = isset($data['theft_loss_discovered_date']) ? $data['theft_loss_discovered_date'] : null;
        $this->container['theft_loss_type'] = isset($data['theft_loss_type']) ? $data['theft_loss_type'] : null;
        $this->container['theft_loss_atf_issued_incident_number'] = isset($data['theft_loss_atf_issued_incident_number']) ? $data['theft_loss_atf_issued_incident_number'] : null;
        $this->container['theft_loss_police_incident_number'] = isset($data['theft_loss_police_incident_number']) ? $data['theft_loss_police_incident_number'] : null;
        $this->container['destroyed_date'] = isset($data['destroyed_date']) ? $data['destroyed_date'] : null;
        $this->container['destroyed_description'] = isset($data['destroyed_description']) ? $data['destroyed_description'] : null;
        $this->container['destroyed_witness1'] = isset($data['destroyed_witness1']) ? $data['destroyed_witness1'] : null;
        $this->container['destroyed_witness2'] = isset($data['destroyed_witness2']) ? $data['destroyed_witness2'] : null;
        $this->container['other_transferee_emails'] = isset($data['other_transferee_emails']) ? $data['other_transferee_emails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_type'] === null) {
            $invalidProperties[] = "'request_type' can't be null";
        }
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!is_null($this->container['request_type']) && !in_array($this->container['request_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'request_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_type
     *
     * @return string
     */
    public function getRequestType()
    {
        return $this->container['request_type'];
    }

    /**
     * Sets request_type
     *
     * @param string $request_type <br>The type of disposition to create: regular, Manufacturing, NFA, Theft/Loss, or Destroyed.
     *
     * @return $this
     */
    public function setRequestType($request_type)
    {
        $allowedValues = $this->getRequestTypeAllowableValues();
        if (!in_array($request_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'request_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['request_type'] = $request_type;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string $contact_id If not null, the ID of a FastBound Contact to use as the Disposition Contact.
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_external_id
     *
     * @return string
     */
    public function getContactExternalId()
    {
        return $this->container['contact_external_id'];
    }

    /**
     * Sets contact_external_id
     *
     * @param string $contact_external_id If not null, and ContactId is null, the External ID of a FastBound Contact to use as   the Disposition Contact.
     *
     * @return $this
     */
    public function setContactExternalId($contact_external_id)
    {
        $this->container['contact_external_id'] = $contact_external_id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandCreateAndCommitContactModel
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandCreateAndCommitContactModel $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandItemModel[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandItemModel[] $items The items to dispose.
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets manufacturing_changes
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel
     */
    public function getManufacturingChanges()
    {
        return $this->container['manufacturing_changes'];
    }

    /**
     * Sets manufacturing_changes
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitManufacturingChangesModel $manufacturing_changes manufacturing_changes
     *
     * @return $this
     */
    public function setManufacturingChanges($manufacturing_changes)
    {
        $this->container['manufacturing_changes'] = $manufacturing_changes;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Required. Date of disposal.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The disposition type. Required for Regular, Manufacturing, and NFA dispositions.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets ttsn
     *
     * @return string
     */
    public function getTtsn()
    {
        return $this->container['ttsn'];
    }

    /**
     * Sets ttsn
     *
     * @param string $ttsn ttsn
     *
     * @return $this
     */
    public function setTtsn($ttsn)
    {
        $this->container['ttsn'] = $ttsn;

        return $this;
    }

    /**
     * Gets generate_ttsn
     *
     * @return bool
     */
    public function getGenerateTtsn()
    {
        return $this->container['generate_ttsn'];
    }

    /**
     * Sets generate_ttsn
     *
     * @param bool $generate_ttsn generate_ttsn
     *
     * @return $this
     */
    public function setGenerateTtsn($generate_ttsn)
    {
        $this->container['generate_ttsn'] = $generate_ttsn;

        return $this;
    }

    /**
     * Gets otsn
     *
     * @return string
     */
    public function getOtsn()
    {
        return $this->container['otsn'];
    }

    /**
     * Sets otsn
     *
     * @param string $otsn otsn
     *
     * @return $this
     */
    public function setOtsn($otsn)
    {
        $this->container['otsn'] = $otsn;

        return $this;
    }

    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number purchase_order_number
     *
     * @return $this
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number invoice_number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets shipment_tracking_number
     *
     * @return string
     */
    public function getShipmentTrackingNumber()
    {
        return $this->container['shipment_tracking_number'];
    }

    /**
     * Sets shipment_tracking_number
     *
     * @param string $shipment_tracking_number shipment_tracking_number
     *
     * @return $this
     */
    public function setShipmentTrackingNumber($shipment_tracking_number)
    {
        $this->container['shipment_tracking_number'] = $shipment_tracking_number;

        return $this;
    }

    /**
     * Gets submission_date
     *
     * @return \DateTime
     */
    public function getSubmissionDate()
    {
        return $this->container['submission_date'];
    }

    /**
     * Sets submission_date
     *
     * @param \DateTime $submission_date submission_date
     *
     * @return $this
     */
    public function setSubmissionDate($submission_date)
    {
        $this->container['submission_date'] = $submission_date;

        return $this;
    }

    /**
     * Gets theft_loss_discovered_date
     *
     * @return \DateTime
     */
    public function getTheftLossDiscoveredDate()
    {
        return $this->container['theft_loss_discovered_date'];
    }

    /**
     * Sets theft_loss_discovered_date
     *
     * @param \DateTime $theft_loss_discovered_date theft_loss_discovered_date
     *
     * @return $this
     */
    public function setTheftLossDiscoveredDate($theft_loss_discovered_date)
    {
        $this->container['theft_loss_discovered_date'] = $theft_loss_discovered_date;

        return $this;
    }

    /**
     * Gets theft_loss_type
     *
     * @return string
     */
    public function getTheftLossType()
    {
        return $this->container['theft_loss_type'];
    }

    /**
     * Sets theft_loss_type
     *
     * @param string $theft_loss_type theft_loss_type
     *
     * @return $this
     */
    public function setTheftLossType($theft_loss_type)
    {
        $this->container['theft_loss_type'] = $theft_loss_type;

        return $this;
    }

    /**
     * Gets theft_loss_atf_issued_incident_number
     *
     * @return string
     */
    public function getTheftLossAtfIssuedIncidentNumber()
    {
        return $this->container['theft_loss_atf_issued_incident_number'];
    }

    /**
     * Sets theft_loss_atf_issued_incident_number
     *
     * @param string $theft_loss_atf_issued_incident_number theft_loss_atf_issued_incident_number
     *
     * @return $this
     */
    public function setTheftLossAtfIssuedIncidentNumber($theft_loss_atf_issued_incident_number)
    {
        $this->container['theft_loss_atf_issued_incident_number'] = $theft_loss_atf_issued_incident_number;

        return $this;
    }

    /**
     * Gets theft_loss_police_incident_number
     *
     * @return string
     */
    public function getTheftLossPoliceIncidentNumber()
    {
        return $this->container['theft_loss_police_incident_number'];
    }

    /**
     * Sets theft_loss_police_incident_number
     *
     * @param string $theft_loss_police_incident_number theft_loss_police_incident_number
     *
     * @return $this
     */
    public function setTheftLossPoliceIncidentNumber($theft_loss_police_incident_number)
    {
        $this->container['theft_loss_police_incident_number'] = $theft_loss_police_incident_number;

        return $this;
    }

    /**
     * Gets destroyed_date
     *
     * @return \DateTime
     */
    public function getDestroyedDate()
    {
        return $this->container['destroyed_date'];
    }

    /**
     * Sets destroyed_date
     *
     * @param \DateTime $destroyed_date destroyed_date
     *
     * @return $this
     */
    public function setDestroyedDate($destroyed_date)
    {
        $this->container['destroyed_date'] = $destroyed_date;

        return $this;
    }

    /**
     * Gets destroyed_description
     *
     * @return string
     */
    public function getDestroyedDescription()
    {
        return $this->container['destroyed_description'];
    }

    /**
     * Sets destroyed_description
     *
     * @param string $destroyed_description destroyed_description
     *
     * @return $this
     */
    public function setDestroyedDescription($destroyed_description)
    {
        $this->container['destroyed_description'] = $destroyed_description;

        return $this;
    }

    /**
     * Gets destroyed_witness1
     *
     * @return string
     */
    public function getDestroyedWitness1()
    {
        return $this->container['destroyed_witness1'];
    }

    /**
     * Sets destroyed_witness1
     *
     * @param string $destroyed_witness1 destroyed_witness1
     *
     * @return $this
     */
    public function setDestroyedWitness1($destroyed_witness1)
    {
        $this->container['destroyed_witness1'] = $destroyed_witness1;

        return $this;
    }

    /**
     * Gets destroyed_witness2
     *
     * @return string
     */
    public function getDestroyedWitness2()
    {
        return $this->container['destroyed_witness2'];
    }

    /**
     * Sets destroyed_witness2
     *
     * @param string $destroyed_witness2 destroyed_witness2
     *
     * @return $this
     */
    public function setDestroyedWitness2($destroyed_witness2)
    {
        $this->container['destroyed_witness2'] = $destroyed_witness2;

        return $this;
    }

    /**
     * Gets other_transferee_emails
     *
     * @return string[]
     */
    public function getOtherTransfereeEmails()
    {
        return $this->container['other_transferee_emails'];
    }

    /**
     * Sets other_transferee_emails
     *
     * @param string[] $other_transferee_emails Optional. Other transferee emails to use, in addition to the disposition contact, to try to find a FastBound   account in which to create a transfer acquisition.
     *
     * @return $this
     */
    public function setOtherTransfereeEmails($other_transferee_emails)
    {
        $this->container['other_transferee_emails'] = $other_transferee_emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
