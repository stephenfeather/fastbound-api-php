<?php
/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1InventoryBulkVerifyCommandResultVerifiedItemModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Inventory.BulkVerify+CommandResult+VerifiedItemModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'external_id' => 'string',
        'item_number' => 'string',
        'status' => '\Swagger\Client\Model\FastBoundWebModelsApiV1ItemsItemStatusModel',
        'do_not_dispose' => 'bool',
        'manufacturer' => 'string',
        'importer' => 'string',
        'model' => 'string',
        'serial' => 'string',
        'type' => 'string',
        'caliber' => 'string',
        'country_of_manufacture' => 'string',
        'barrel_length' => 'double',
        'overall_length' => 'double',
        'location' => 'string',
        'condition' => 'string',
        'location_verified_utc' => '\DateTime',
        'mpn' => 'string',
        'upc' => 'string',
        'sku' => 'string',
        'cost' => 'double',
        'price' => 'double',
        'profit' => 'double',
        'margin' => 'double',
        'acquisition_type' => 'string',
        'acquire_date' => '\DateTime',
        'acquisition_user_email' => 'string',
        'acquire_purchase_order_number' => 'string',
        'acquire_invoice_number' => 'string',
        'acquire_shipment_tracking_number' => 'string',
        'acquire_license' => 'string',
        'acquire_license_name' => 'string',
        'acquire_license_expires' => '\DateTime',
        'acquire_organization' => 'string',
        'acquire_first_name' => 'string',
        'acquire_last_name' => 'string',
        'acquire_address1' => 'string',
        'acquire_address2' => 'string',
        'acquire_city' => 'string',
        'acquire_state' => 'string',
        'acquire_postal' => 'string',
        'acquire_country' => 'string',
        'acquire_phone_number' => 'string',
        'acquire_fax' => 'string',
        'acquire_email_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'external_id' => null,
        'item_number' => null,
        'status' => null,
        'do_not_dispose' => null,
        'manufacturer' => null,
        'importer' => null,
        'model' => null,
        'serial' => null,
        'type' => null,
        'caliber' => null,
        'country_of_manufacture' => null,
        'barrel_length' => 'double',
        'overall_length' => 'double',
        'location' => null,
        'condition' => null,
        'location_verified_utc' => 'date-time',
        'mpn' => null,
        'upc' => null,
        'sku' => null,
        'cost' => 'double',
        'price' => 'double',
        'profit' => 'double',
        'margin' => 'double',
        'acquisition_type' => null,
        'acquire_date' => 'date-time',
        'acquisition_user_email' => null,
        'acquire_purchase_order_number' => null,
        'acquire_invoice_number' => null,
        'acquire_shipment_tracking_number' => null,
        'acquire_license' => null,
        'acquire_license_name' => null,
        'acquire_license_expires' => 'date-time',
        'acquire_organization' => null,
        'acquire_first_name' => null,
        'acquire_last_name' => null,
        'acquire_address1' => null,
        'acquire_address2' => null,
        'acquire_city' => null,
        'acquire_state' => null,
        'acquire_postal' => null,
        'acquire_country' => null,
        'acquire_phone_number' => null,
        'acquire_fax' => null,
        'acquire_email_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalId',
        'item_number' => 'itemNumber',
        'status' => 'status',
        'do_not_dispose' => 'doNotDispose',
        'manufacturer' => 'manufacturer',
        'importer' => 'importer',
        'model' => 'model',
        'serial' => 'serial',
        'type' => 'type',
        'caliber' => 'caliber',
        'country_of_manufacture' => 'countryOfManufacture',
        'barrel_length' => 'barrelLength',
        'overall_length' => 'overallLength',
        'location' => 'location',
        'condition' => 'condition',
        'location_verified_utc' => 'locationVerifiedUtc',
        'mpn' => 'mpn',
        'upc' => 'upc',
        'sku' => 'sku',
        'cost' => 'cost',
        'price' => 'price',
        'profit' => 'profit',
        'margin' => 'margin',
        'acquisition_type' => 'acquisitionType',
        'acquire_date' => 'acquire_Date',
        'acquisition_user_email' => 'acquisitionUserEmail',
        'acquire_purchase_order_number' => 'acquire_PurchaseOrderNumber',
        'acquire_invoice_number' => 'acquire_InvoiceNumber',
        'acquire_shipment_tracking_number' => 'acquire_ShipmentTrackingNumber',
        'acquire_license' => 'acquire_License',
        'acquire_license_name' => 'acquire_LicenseName',
        'acquire_license_expires' => 'acquire_LicenseExpires',
        'acquire_organization' => 'acquire_Organization',
        'acquire_first_name' => 'acquire_FirstName',
        'acquire_last_name' => 'acquire_LastName',
        'acquire_address1' => 'acquire_Address1',
        'acquire_address2' => 'acquire_Address2',
        'acquire_city' => 'acquire_City',
        'acquire_state' => 'acquire_State',
        'acquire_postal' => 'acquire_Postal',
        'acquire_country' => 'acquire_Country',
        'acquire_phone_number' => 'acquire_PhoneNumber',
        'acquire_fax' => 'acquire_Fax',
        'acquire_email_address' => 'acquire_EmailAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'item_number' => 'setItemNumber',
        'status' => 'setStatus',
        'do_not_dispose' => 'setDoNotDispose',
        'manufacturer' => 'setManufacturer',
        'importer' => 'setImporter',
        'model' => 'setModel',
        'serial' => 'setSerial',
        'type' => 'setType',
        'caliber' => 'setCaliber',
        'country_of_manufacture' => 'setCountryOfManufacture',
        'barrel_length' => 'setBarrelLength',
        'overall_length' => 'setOverallLength',
        'location' => 'setLocation',
        'condition' => 'setCondition',
        'location_verified_utc' => 'setLocationVerifiedUtc',
        'mpn' => 'setMpn',
        'upc' => 'setUpc',
        'sku' => 'setSku',
        'cost' => 'setCost',
        'price' => 'setPrice',
        'profit' => 'setProfit',
        'margin' => 'setMargin',
        'acquisition_type' => 'setAcquisitionType',
        'acquire_date' => 'setAcquireDate',
        'acquisition_user_email' => 'setAcquisitionUserEmail',
        'acquire_purchase_order_number' => 'setAcquirePurchaseOrderNumber',
        'acquire_invoice_number' => 'setAcquireInvoiceNumber',
        'acquire_shipment_tracking_number' => 'setAcquireShipmentTrackingNumber',
        'acquire_license' => 'setAcquireLicense',
        'acquire_license_name' => 'setAcquireLicenseName',
        'acquire_license_expires' => 'setAcquireLicenseExpires',
        'acquire_organization' => 'setAcquireOrganization',
        'acquire_first_name' => 'setAcquireFirstName',
        'acquire_last_name' => 'setAcquireLastName',
        'acquire_address1' => 'setAcquireAddress1',
        'acquire_address2' => 'setAcquireAddress2',
        'acquire_city' => 'setAcquireCity',
        'acquire_state' => 'setAcquireState',
        'acquire_postal' => 'setAcquirePostal',
        'acquire_country' => 'setAcquireCountry',
        'acquire_phone_number' => 'setAcquirePhoneNumber',
        'acquire_fax' => 'setAcquireFax',
        'acquire_email_address' => 'setAcquireEmailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'item_number' => 'getItemNumber',
        'status' => 'getStatus',
        'do_not_dispose' => 'getDoNotDispose',
        'manufacturer' => 'getManufacturer',
        'importer' => 'getImporter',
        'model' => 'getModel',
        'serial' => 'getSerial',
        'type' => 'getType',
        'caliber' => 'getCaliber',
        'country_of_manufacture' => 'getCountryOfManufacture',
        'barrel_length' => 'getBarrelLength',
        'overall_length' => 'getOverallLength',
        'location' => 'getLocation',
        'condition' => 'getCondition',
        'location_verified_utc' => 'getLocationVerifiedUtc',
        'mpn' => 'getMpn',
        'upc' => 'getUpc',
        'sku' => 'getSku',
        'cost' => 'getCost',
        'price' => 'getPrice',
        'profit' => 'getProfit',
        'margin' => 'getMargin',
        'acquisition_type' => 'getAcquisitionType',
        'acquire_date' => 'getAcquireDate',
        'acquisition_user_email' => 'getAcquisitionUserEmail',
        'acquire_purchase_order_number' => 'getAcquirePurchaseOrderNumber',
        'acquire_invoice_number' => 'getAcquireInvoiceNumber',
        'acquire_shipment_tracking_number' => 'getAcquireShipmentTrackingNumber',
        'acquire_license' => 'getAcquireLicense',
        'acquire_license_name' => 'getAcquireLicenseName',
        'acquire_license_expires' => 'getAcquireLicenseExpires',
        'acquire_organization' => 'getAcquireOrganization',
        'acquire_first_name' => 'getAcquireFirstName',
        'acquire_last_name' => 'getAcquireLastName',
        'acquire_address1' => 'getAcquireAddress1',
        'acquire_address2' => 'getAcquireAddress2',
        'acquire_city' => 'getAcquireCity',
        'acquire_state' => 'getAcquireState',
        'acquire_postal' => 'getAcquirePostal',
        'acquire_country' => 'getAcquireCountry',
        'acquire_phone_number' => 'getAcquirePhoneNumber',
        'acquire_fax' => 'getAcquireFax',
        'acquire_email_address' => 'getAcquireEmailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['item_number'] = isset($data['item_number']) ? $data['item_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['do_not_dispose'] = isset($data['do_not_dispose']) ? $data['do_not_dispose'] : null;
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['importer'] = isset($data['importer']) ? $data['importer'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['serial'] = isset($data['serial']) ? $data['serial'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['caliber'] = isset($data['caliber']) ? $data['caliber'] : null;
        $this->container['country_of_manufacture'] = isset($data['country_of_manufacture']) ? $data['country_of_manufacture'] : null;
        $this->container['barrel_length'] = isset($data['barrel_length']) ? $data['barrel_length'] : null;
        $this->container['overall_length'] = isset($data['overall_length']) ? $data['overall_length'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['location_verified_utc'] = isset($data['location_verified_utc']) ? $data['location_verified_utc'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['profit'] = isset($data['profit']) ? $data['profit'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['acquisition_type'] = isset($data['acquisition_type']) ? $data['acquisition_type'] : null;
        $this->container['acquire_date'] = isset($data['acquire_date']) ? $data['acquire_date'] : null;
        $this->container['acquisition_user_email'] = isset($data['acquisition_user_email']) ? $data['acquisition_user_email'] : null;
        $this->container['acquire_purchase_order_number'] = isset($data['acquire_purchase_order_number']) ? $data['acquire_purchase_order_number'] : null;
        $this->container['acquire_invoice_number'] = isset($data['acquire_invoice_number']) ? $data['acquire_invoice_number'] : null;
        $this->container['acquire_shipment_tracking_number'] = isset($data['acquire_shipment_tracking_number']) ? $data['acquire_shipment_tracking_number'] : null;
        $this->container['acquire_license'] = isset($data['acquire_license']) ? $data['acquire_license'] : null;
        $this->container['acquire_license_name'] = isset($data['acquire_license_name']) ? $data['acquire_license_name'] : null;
        $this->container['acquire_license_expires'] = isset($data['acquire_license_expires']) ? $data['acquire_license_expires'] : null;
        $this->container['acquire_organization'] = isset($data['acquire_organization']) ? $data['acquire_organization'] : null;
        $this->container['acquire_first_name'] = isset($data['acquire_first_name']) ? $data['acquire_first_name'] : null;
        $this->container['acquire_last_name'] = isset($data['acquire_last_name']) ? $data['acquire_last_name'] : null;
        $this->container['acquire_address1'] = isset($data['acquire_address1']) ? $data['acquire_address1'] : null;
        $this->container['acquire_address2'] = isset($data['acquire_address2']) ? $data['acquire_address2'] : null;
        $this->container['acquire_city'] = isset($data['acquire_city']) ? $data['acquire_city'] : null;
        $this->container['acquire_state'] = isset($data['acquire_state']) ? $data['acquire_state'] : null;
        $this->container['acquire_postal'] = isset($data['acquire_postal']) ? $data['acquire_postal'] : null;
        $this->container['acquire_country'] = isset($data['acquire_country']) ? $data['acquire_country'] : null;
        $this->container['acquire_phone_number'] = isset($data['acquire_phone_number']) ? $data['acquire_phone_number'] : null;
        $this->container['acquire_fax'] = isset($data['acquire_fax']) ? $data['acquire_fax'] : null;
        $this->container['acquire_email_address'] = isset($data['acquire_email_address']) ? $data['acquire_email_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets item_number
     *
     * @return string
     */
    public function getItemNumber()
    {
        return $this->container['item_number'];
    }

    /**
     * Sets item_number
     *
     * @param string $item_number item_number
     *
     * @return $this
     */
    public function setItemNumber($item_number)
    {
        $this->container['item_number'] = $item_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ItemsItemStatusModel
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Swagger\Client\Model\FastBoundWebModelsApiV1ItemsItemStatusModel $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets do_not_dispose
     *
     * @return bool
     */
    public function getDoNotDispose()
    {
        return $this->container['do_not_dispose'];
    }

    /**
     * Sets do_not_dispose
     *
     * @param bool $do_not_dispose do_not_dispose
     *
     * @return $this
     */
    public function setDoNotDispose($do_not_dispose)
    {
        $this->container['do_not_dispose'] = $do_not_dispose;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer manufacturer
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return string
     */
    public function getImporter()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param string $importer importer
     *
     * @return $this
     */
    public function setImporter($importer)
    {
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets serial
     *
     * @return string
     */
    public function getSerial()
    {
        return $this->container['serial'];
    }

    /**
     * Sets serial
     *
     * @param string $serial serial
     *
     * @return $this
     */
    public function setSerial($serial)
    {
        $this->container['serial'] = $serial;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets caliber
     *
     * @return string
     */
    public function getCaliber()
    {
        return $this->container['caliber'];
    }

    /**
     * Sets caliber
     *
     * @param string $caliber caliber
     *
     * @return $this
     */
    public function setCaliber($caliber)
    {
        $this->container['caliber'] = $caliber;

        return $this;
    }

    /**
     * Gets country_of_manufacture
     *
     * @return string
     */
    public function getCountryOfManufacture()
    {
        return $this->container['country_of_manufacture'];
    }

    /**
     * Sets country_of_manufacture
     *
     * @param string $country_of_manufacture country_of_manufacture
     *
     * @return $this
     */
    public function setCountryOfManufacture($country_of_manufacture)
    {
        $this->container['country_of_manufacture'] = $country_of_manufacture;

        return $this;
    }

    /**
     * Gets barrel_length
     *
     * @return double
     */
    public function getBarrelLength()
    {
        return $this->container['barrel_length'];
    }

    /**
     * Sets barrel_length
     *
     * @param double $barrel_length barrel_length
     *
     * @return $this
     */
    public function setBarrelLength($barrel_length)
    {
        $this->container['barrel_length'] = $barrel_length;

        return $this;
    }

    /**
     * Gets overall_length
     *
     * @return double
     */
    public function getOverallLength()
    {
        return $this->container['overall_length'];
    }

    /**
     * Sets overall_length
     *
     * @param double $overall_length overall_length
     *
     * @return $this
     */
    public function setOverallLength($overall_length)
    {
        $this->container['overall_length'] = $overall_length;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets location_verified_utc
     *
     * @return \DateTime
     */
    public function getLocationVerifiedUtc()
    {
        return $this->container['location_verified_utc'];
    }

    /**
     * Sets location_verified_utc
     *
     * @param \DateTime $location_verified_utc location_verified_utc
     *
     * @return $this
     */
    public function setLocationVerifiedUtc($location_verified_utc)
    {
        $this->container['location_verified_utc'] = $location_verified_utc;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn mpn
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc upc
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return double
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param double $profit profit
     *
     * @return $this
     */
    public function setProfit($profit)
    {
        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return double
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param double $margin margin
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets acquisition_type
     *
     * @return string
     */
    public function getAcquisitionType()
    {
        return $this->container['acquisition_type'];
    }

    /**
     * Sets acquisition_type
     *
     * @param string $acquisition_type acquisition_type
     *
     * @return $this
     */
    public function setAcquisitionType($acquisition_type)
    {
        $this->container['acquisition_type'] = $acquisition_type;

        return $this;
    }

    /**
     * Gets acquire_date
     *
     * @return \DateTime
     */
    public function getAcquireDate()
    {
        return $this->container['acquire_date'];
    }

    /**
     * Sets acquire_date
     *
     * @param \DateTime $acquire_date acquire_date
     *
     * @return $this
     */
    public function setAcquireDate($acquire_date)
    {
        $this->container['acquire_date'] = $acquire_date;

        return $this;
    }

    /**
     * Gets acquisition_user_email
     *
     * @return string
     */
    public function getAcquisitionUserEmail()
    {
        return $this->container['acquisition_user_email'];
    }

    /**
     * Sets acquisition_user_email
     *
     * @param string $acquisition_user_email acquisition_user_email
     *
     * @return $this
     */
    public function setAcquisitionUserEmail($acquisition_user_email)
    {
        $this->container['acquisition_user_email'] = $acquisition_user_email;

        return $this;
    }

    /**
     * Gets acquire_purchase_order_number
     *
     * @return string
     */
    public function getAcquirePurchaseOrderNumber()
    {
        return $this->container['acquire_purchase_order_number'];
    }

    /**
     * Sets acquire_purchase_order_number
     *
     * @param string $acquire_purchase_order_number acquire_purchase_order_number
     *
     * @return $this
     */
    public function setAcquirePurchaseOrderNumber($acquire_purchase_order_number)
    {
        $this->container['acquire_purchase_order_number'] = $acquire_purchase_order_number;

        return $this;
    }

    /**
     * Gets acquire_invoice_number
     *
     * @return string
     */
    public function getAcquireInvoiceNumber()
    {
        return $this->container['acquire_invoice_number'];
    }

    /**
     * Sets acquire_invoice_number
     *
     * @param string $acquire_invoice_number acquire_invoice_number
     *
     * @return $this
     */
    public function setAcquireInvoiceNumber($acquire_invoice_number)
    {
        $this->container['acquire_invoice_number'] = $acquire_invoice_number;

        return $this;
    }

    /**
     * Gets acquire_shipment_tracking_number
     *
     * @return string
     */
    public function getAcquireShipmentTrackingNumber()
    {
        return $this->container['acquire_shipment_tracking_number'];
    }

    /**
     * Sets acquire_shipment_tracking_number
     *
     * @param string $acquire_shipment_tracking_number acquire_shipment_tracking_number
     *
     * @return $this
     */
    public function setAcquireShipmentTrackingNumber($acquire_shipment_tracking_number)
    {
        $this->container['acquire_shipment_tracking_number'] = $acquire_shipment_tracking_number;

        return $this;
    }

    /**
     * Gets acquire_license
     *
     * @return string
     */
    public function getAcquireLicense()
    {
        return $this->container['acquire_license'];
    }

    /**
     * Sets acquire_license
     *
     * @param string $acquire_license acquire_license
     *
     * @return $this
     */
    public function setAcquireLicense($acquire_license)
    {
        $this->container['acquire_license'] = $acquire_license;

        return $this;
    }

    /**
     * Gets acquire_license_name
     *
     * @return string
     */
    public function getAcquireLicenseName()
    {
        return $this->container['acquire_license_name'];
    }

    /**
     * Sets acquire_license_name
     *
     * @param string $acquire_license_name acquire_license_name
     *
     * @return $this
     */
    public function setAcquireLicenseName($acquire_license_name)
    {
        $this->container['acquire_license_name'] = $acquire_license_name;

        return $this;
    }

    /**
     * Gets acquire_license_expires
     *
     * @return \DateTime
     */
    public function getAcquireLicenseExpires()
    {
        return $this->container['acquire_license_expires'];
    }

    /**
     * Sets acquire_license_expires
     *
     * @param \DateTime $acquire_license_expires acquire_license_expires
     *
     * @return $this
     */
    public function setAcquireLicenseExpires($acquire_license_expires)
    {
        $this->container['acquire_license_expires'] = $acquire_license_expires;

        return $this;
    }

    /**
     * Gets acquire_organization
     *
     * @return string
     */
    public function getAcquireOrganization()
    {
        return $this->container['acquire_organization'];
    }

    /**
     * Sets acquire_organization
     *
     * @param string $acquire_organization acquire_organization
     *
     * @return $this
     */
    public function setAcquireOrganization($acquire_organization)
    {
        $this->container['acquire_organization'] = $acquire_organization;

        return $this;
    }

    /**
     * Gets acquire_first_name
     *
     * @return string
     */
    public function getAcquireFirstName()
    {
        return $this->container['acquire_first_name'];
    }

    /**
     * Sets acquire_first_name
     *
     * @param string $acquire_first_name acquire_first_name
     *
     * @return $this
     */
    public function setAcquireFirstName($acquire_first_name)
    {
        $this->container['acquire_first_name'] = $acquire_first_name;

        return $this;
    }

    /**
     * Gets acquire_last_name
     *
     * @return string
     */
    public function getAcquireLastName()
    {
        return $this->container['acquire_last_name'];
    }

    /**
     * Sets acquire_last_name
     *
     * @param string $acquire_last_name acquire_last_name
     *
     * @return $this
     */
    public function setAcquireLastName($acquire_last_name)
    {
        $this->container['acquire_last_name'] = $acquire_last_name;

        return $this;
    }

    /**
     * Gets acquire_address1
     *
     * @return string
     */
    public function getAcquireAddress1()
    {
        return $this->container['acquire_address1'];
    }

    /**
     * Sets acquire_address1
     *
     * @param string $acquire_address1 acquire_address1
     *
     * @return $this
     */
    public function setAcquireAddress1($acquire_address1)
    {
        $this->container['acquire_address1'] = $acquire_address1;

        return $this;
    }

    /**
     * Gets acquire_address2
     *
     * @return string
     */
    public function getAcquireAddress2()
    {
        return $this->container['acquire_address2'];
    }

    /**
     * Sets acquire_address2
     *
     * @param string $acquire_address2 acquire_address2
     *
     * @return $this
     */
    public function setAcquireAddress2($acquire_address2)
    {
        $this->container['acquire_address2'] = $acquire_address2;

        return $this;
    }

    /**
     * Gets acquire_city
     *
     * @return string
     */
    public function getAcquireCity()
    {
        return $this->container['acquire_city'];
    }

    /**
     * Sets acquire_city
     *
     * @param string $acquire_city acquire_city
     *
     * @return $this
     */
    public function setAcquireCity($acquire_city)
    {
        $this->container['acquire_city'] = $acquire_city;

        return $this;
    }

    /**
     * Gets acquire_state
     *
     * @return string
     */
    public function getAcquireState()
    {
        return $this->container['acquire_state'];
    }

    /**
     * Sets acquire_state
     *
     * @param string $acquire_state acquire_state
     *
     * @return $this
     */
    public function setAcquireState($acquire_state)
    {
        $this->container['acquire_state'] = $acquire_state;

        return $this;
    }

    /**
     * Gets acquire_postal
     *
     * @return string
     */
    public function getAcquirePostal()
    {
        return $this->container['acquire_postal'];
    }

    /**
     * Sets acquire_postal
     *
     * @param string $acquire_postal acquire_postal
     *
     * @return $this
     */
    public function setAcquirePostal($acquire_postal)
    {
        $this->container['acquire_postal'] = $acquire_postal;

        return $this;
    }

    /**
     * Gets acquire_country
     *
     * @return string
     */
    public function getAcquireCountry()
    {
        return $this->container['acquire_country'];
    }

    /**
     * Sets acquire_country
     *
     * @param string $acquire_country acquire_country
     *
     * @return $this
     */
    public function setAcquireCountry($acquire_country)
    {
        $this->container['acquire_country'] = $acquire_country;

        return $this;
    }

    /**
     * Gets acquire_phone_number
     *
     * @return string
     */
    public function getAcquirePhoneNumber()
    {
        return $this->container['acquire_phone_number'];
    }

    /**
     * Sets acquire_phone_number
     *
     * @param string $acquire_phone_number acquire_phone_number
     *
     * @return $this
     */
    public function setAcquirePhoneNumber($acquire_phone_number)
    {
        $this->container['acquire_phone_number'] = $acquire_phone_number;

        return $this;
    }

    /**
     * Gets acquire_fax
     *
     * @return string
     */
    public function getAcquireFax()
    {
        return $this->container['acquire_fax'];
    }

    /**
     * Sets acquire_fax
     *
     * @param string $acquire_fax acquire_fax
     *
     * @return $this
     */
    public function setAcquireFax($acquire_fax)
    {
        $this->container['acquire_fax'] = $acquire_fax;

        return $this;
    }

    /**
     * Gets acquire_email_address
     *
     * @return string
     */
    public function getAcquireEmailAddress()
    {
        return $this->container['acquire_email_address'];
    }

    /**
     * Sets acquire_email_address
     *
     * @param string $acquire_email_address acquire_email_address
     *
     * @return $this
     */
    public function setAcquireEmailAddress($acquire_email_address)
    {
        $this->container['acquire_email_address'] = $acquire_email_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
