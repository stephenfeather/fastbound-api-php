<?php
/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommand
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1InventoryBulkVerifyCommand Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1InventoryBulkVerifyCommand implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Inventory.BulkVerify+Command';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'serials' => 'string[]',
        'rollback_partial' => 'bool',
        'update_location' => 'bool',
        'location' => 'string',
        'verified_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'serials' => null,
        'rollback_partial' => null,
        'update_location' => null,
        'location' => null,
        'verified_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'serials' => 'serials',
        'rollback_partial' => 'rollbackPartial',
        'update_location' => 'updateLocation',
        'location' => 'location',
        'verified_utc' => 'verifiedUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'serials' => 'setSerials',
        'rollback_partial' => 'setRollbackPartial',
        'update_location' => 'setUpdateLocation',
        'location' => 'setLocation',
        'verified_utc' => 'setVerifiedUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'serials' => 'getSerials',
        'rollback_partial' => 'getRollbackPartial',
        'update_location' => 'getUpdateLocation',
        'location' => 'getLocation',
        'verified_utc' => 'getVerifiedUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['serials'] = isset($data['serials']) ? $data['serials'] : null;
        $this->container['rollback_partial'] = isset($data['rollback_partial']) ? $data['rollback_partial'] : null;
        $this->container['update_location'] = isset($data['update_location']) ? $data['update_location'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['verified_utc'] = isset($data['verified_utc']) ? $data['verified_utc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets serials
     *
     * @return string[]
     */
    public function getSerials()
    {
        return $this->container['serials'];
    }

    /**
     * Sets serials
     *
     * @param string[] $serials The serials of items in inventory to verify. You can verify up to 1,000 items in a single call.
     *
     * @return $this
     */
    public function setSerials($serials)
    {
        $this->container['serials'] = $serials;

        return $this;
    }

    /**
     * Gets rollback_partial
     *
     * @return bool
     */
    public function getRollbackPartial()
    {
        return $this->container['rollback_partial'];
    }

    /**
     * Sets rollback_partial
     *
     * @param bool $rollback_partial True to discard any changes if one or more serials have no matches or match multiple items; false  to commit changes to serials with exact matches, regardless of whether or not any other serials  had no matches or multiple matches. Default is false.
     *
     * @return $this
     */
    public function setRollbackPartial($rollback_partial)
    {
        $this->container['rollback_partial'] = $rollback_partial;

        return $this;
    }

    /**
     * Gets update_location
     *
     * @return bool
     */
    public function getUpdateLocation()
    {
        return $this->container['update_location'];
    }

    /**
     * Sets update_location
     *
     * @param bool $update_location True to update each matching item's Location. False to leave the Location untouched. Default is false.
     *
     * @return $this
     */
    public function setUpdateLocation($update_location)
    {
        $this->container['update_location'] = $update_location;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location If FastBound.Web.Models.Api.V1.Inventory.BulkVerify.Command.UpdateLocation is true, the Location that Items will be updated to. Ignored if  FastBound.Web.Models.Api.V1.Inventory.BulkVerify.Command.UpdateLocation is false.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets verified_utc
     *
     * @return \DateTime
     */
    public function getVerifiedUtc()
    {
        return $this->container['verified_utc'];
    }

    /**
     * Sets verified_utc
     *
     * @param \DateTime $verified_utc The UTC date/time of when the items were verified. Cannot be a future date, and cannot be more than  15 days in the past. Default is the current UTC date/time.
     *
     * @return $this
     */
    public function setVerifiedUtc($verified_utc)
    {
        $this->container['verified_utc'] = $verified_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
