<?php
/**
 * FastBoundWebModelsApiV1DispositionsAddItemsBySearchCommand
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FastBoundWebModelsApiV1DispositionsAddItemsBySearchCommand Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FastBoundWebModelsApiV1DispositionsAddItemsBySearchCommand implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FastBound.Web.Models.Api.V1.Dispositions.AddItemsBySearch+Command';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manufacturer' => 'string',
        'importer' => 'string',
        'model' => 'string',
        'type' => 'string',
        'caliber' => 'string',
        'location' => 'string',
        'mpn' => 'string',
        'upc' => 'string',
        'condition' => 'string',
        'price' => 'double',
        'acquired_first_or_last' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'manufacturer' => null,
        'importer' => null,
        'model' => null,
        'type' => null,
        'caliber' => null,
        'location' => null,
        'mpn' => null,
        'upc' => null,
        'condition' => null,
        'price' => 'double',
        'acquired_first_or_last' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manufacturer' => 'manufacturer',
        'importer' => 'importer',
        'model' => 'model',
        'type' => 'type',
        'caliber' => 'caliber',
        'location' => 'location',
        'mpn' => 'mpn',
        'upc' => 'upc',
        'condition' => 'condition',
        'price' => 'price',
        'acquired_first_or_last' => 'acquiredFirstOrLast'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manufacturer' => 'setManufacturer',
        'importer' => 'setImporter',
        'model' => 'setModel',
        'type' => 'setType',
        'caliber' => 'setCaliber',
        'location' => 'setLocation',
        'mpn' => 'setMpn',
        'upc' => 'setUpc',
        'condition' => 'setCondition',
        'price' => 'setPrice',
        'acquired_first_or_last' => 'setAcquiredFirstOrLast'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manufacturer' => 'getManufacturer',
        'importer' => 'getImporter',
        'model' => 'getModel',
        'type' => 'getType',
        'caliber' => 'getCaliber',
        'location' => 'getLocation',
        'mpn' => 'getMpn',
        'upc' => 'getUpc',
        'condition' => 'getCondition',
        'price' => 'getPrice',
        'acquired_first_or_last' => 'getAcquiredFirstOrLast'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACQUIRED_FIRST_OR_LAST_FIRST = 'First';
    const ACQUIRED_FIRST_OR_LAST_LAST = 'Last';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcquiredFirstOrLastAllowableValues()
    {
        return [
            self::ACQUIRED_FIRST_OR_LAST_FIRST
            self::ACQUIRED_FIRST_OR_LAST_LAST
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manufacturer'] = isset($data['manufacturer']) ? $data['manufacturer'] : null;
        $this->container['importer'] = isset($data['importer']) ? $data['importer'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['caliber'] = isset($data['caliber']) ? $data['caliber'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['mpn'] = isset($data['mpn']) ? $data['mpn'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['acquired_first_or_last'] = isset($data['acquired_first_or_last']) ? $data['acquired_first_or_last'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAcquiredFirstOrLastAllowableValues();
        if (!is_null($this->container['acquired_first_or_last']) && !in_array($this->container['acquired_first_or_last'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'acquired_first_or_last', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer The Manufacturer of the item to dispose.
     *
     * @return $this
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets importer
     *
     * @return string
     */
    public function getImporter()
    {
        return $this->container['importer'];
    }

    /**
     * Sets importer
     *
     * @param string $importer The Importer of the item to dispose.
     *
     * @return $this
     */
    public function setImporter($importer)
    {
        $this->container['importer'] = $importer;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model The Model of the item to dispose.
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The Type of the item to dispose.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets caliber
     *
     * @return string
     */
    public function getCaliber()
    {
        return $this->container['caliber'];
    }

    /**
     * Sets caliber
     *
     * @param string $caliber The Caliber of the item to dispose.
     *
     * @return $this
     */
    public function setCaliber($caliber)
    {
        $this->container['caliber'] = $caliber;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location The Location of the item to dispose.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string $mpn The MPN of the item to dispose.
     *
     * @return $this
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc The UPC of the item to dispose.
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The Condition of the item to dispose.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price Optional. Price of an item to dispose.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets acquired_first_or_last
     *
     * @return string
     */
    public function getAcquiredFirstOrLast()
    {
        return $this->container['acquired_first_or_last'];
    }

    /**
     * Sets acquired_first_or_last
     *
     * @param string $acquired_first_or_last Required. Choose the first matching item or last matching item (by Acquire Date). Default is First.
     *
     * @return $this
     */
    public function setAcquiredFirstOrLast($acquired_first_or_last)
    {
        $allowedValues = $this->getAcquiredFirstOrLastAllowableValues();
        if (!is_null($acquired_first_or_last) && !in_array($acquired_first_or_last, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'acquired_first_or_last', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['acquired_first_or_last'] = $acquired_first_or_last;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
