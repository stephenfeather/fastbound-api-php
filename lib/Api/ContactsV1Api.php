<?php
/**
 * ContactsV1Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ContactsV1Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountNumApiContactsExternalIdGet
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel
     */
    public function accountNumApiContactsExternalIdGet($external_id, $account_num)
    {
        list($response) = $this->accountNumApiContactsExternalIdGetWithHttpInfo($external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiContactsExternalIdGetWithHttpInfo
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsExternalIdGetWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsExternalIdGetRequest($external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsExternalIdGetAsync
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsExternalIdGetAsync($external_id, $account_num)
    {
        return $this->accountNumApiContactsExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsExternalIdGetRequest($external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsExternalIdGet'
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsExternalIdGetRequest($external_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiContactsExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsExternalIdLicensesLicenseIdGet
     *
     * Retrieves a license for the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand
     */
    public function accountNumApiContactsExternalIdLicensesLicenseIdGet($external_id, $license_id, $account_num)
    {
        list($response) = $this->accountNumApiContactsExternalIdLicensesLicenseIdGetWithHttpInfo($external_id, $license_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiContactsExternalIdLicensesLicenseIdGetWithHttpInfo
     *
     * Retrieves a license for the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsExternalIdLicensesLicenseIdGetWithHttpInfo($external_id, $license_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand';
        $request = $this->accountNumApiContactsExternalIdLicensesLicenseIdGetRequest($external_id, $license_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsExternalIdLicensesLicenseIdGetAsync
     *
     * Retrieves a license for the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsExternalIdLicensesLicenseIdGetAsync($external_id, $license_id, $account_num)
    {
        return $this->accountNumApiContactsExternalIdLicensesLicenseIdGetAsyncWithHttpInfo($external_id, $license_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsExternalIdLicensesLicenseIdGetAsyncWithHttpInfo
     *
     * Retrieves a license for the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsExternalIdLicensesLicenseIdGetAsyncWithHttpInfo($external_id, $license_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand';
        $request = $this->accountNumApiContactsExternalIdLicensesLicenseIdGetRequest($external_id, $license_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsExternalIdLicensesLicenseIdGet'
     *
     * @param  string $external_id The External ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsExternalIdLicensesLicenseIdGetRequest($external_id, $license_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiContactsExternalIdLicensesLicenseIdGet'
            );
        }
        // verify the required parameter 'license_id' is set
        if ($license_id === null || (is_array($license_id) && count($license_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $license_id when calling accountNumApiContactsExternalIdLicensesLicenseIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsExternalIdLicensesLicenseIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{externalId}/Licenses/{licenseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($license_id !== null) {
            $resourcePath = str_replace(
                '{' . 'licenseId' . '}',
                ObjectSerializer::toPathValue($license_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsGet
     *
     * Retrieves the account's contacts.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $license_name Optional query parameter to search for a specific license name. (optional)
     * @param  string $trade_name Optional query parameter to search for a specific trade name. (optional)
     * @param  string $ffl_number Optional query parameter to search for a specific FFL number. (optional)
     * @param  string $organization_name Optional query parameter to search for a specific organization name. (optional)
     * @param  string $first_name Optional query parameter to search for a specific first name. (optional)
     * @param  string $middle_name Optional query parameter to search for a specific middle name. (optional)
     * @param  string $last_name Optional query parameter to search for a specific last name. (optional)
     * @param  int $take Optional query parameter to specify the number of contacts to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetAllCommand
     */
    public function accountNumApiContactsGet($account_num, $license_name = null, $trade_name = null, $ffl_number = null, $organization_name = null, $first_name = null, $middle_name = null, $last_name = null, $take = null, $skip = null)
    {
        list($response) = $this->accountNumApiContactsGetWithHttpInfo($account_num, $license_name, $trade_name, $ffl_number, $organization_name, $first_name, $middle_name, $last_name, $take, $skip);
        return $response;
    }

    /**
     * Operation accountNumApiContactsGetWithHttpInfo
     *
     * Retrieves the account's contacts.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $license_name Optional query parameter to search for a specific license name. (optional)
     * @param  string $trade_name Optional query parameter to search for a specific trade name. (optional)
     * @param  string $ffl_number Optional query parameter to search for a specific FFL number. (optional)
     * @param  string $organization_name Optional query parameter to search for a specific organization name. (optional)
     * @param  string $first_name Optional query parameter to search for a specific first name. (optional)
     * @param  string $middle_name Optional query parameter to search for a specific middle name. (optional)
     * @param  string $last_name Optional query parameter to search for a specific last name. (optional)
     * @param  int $take Optional query parameter to specify the number of contacts to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetAllCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsGetWithHttpInfo($account_num, $license_name = null, $trade_name = null, $ffl_number = null, $organization_name = null, $first_name = null, $middle_name = null, $last_name = null, $take = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetAllCommand';
        $request = $this->accountNumApiContactsGetRequest($account_num, $license_name, $trade_name, $ffl_number, $organization_name, $first_name, $middle_name, $last_name, $take, $skip);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetAllCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsGetAsync
     *
     * Retrieves the account's contacts.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $license_name Optional query parameter to search for a specific license name. (optional)
     * @param  string $trade_name Optional query parameter to search for a specific trade name. (optional)
     * @param  string $ffl_number Optional query parameter to search for a specific FFL number. (optional)
     * @param  string $organization_name Optional query parameter to search for a specific organization name. (optional)
     * @param  string $first_name Optional query parameter to search for a specific first name. (optional)
     * @param  string $middle_name Optional query parameter to search for a specific middle name. (optional)
     * @param  string $last_name Optional query parameter to search for a specific last name. (optional)
     * @param  int $take Optional query parameter to specify the number of contacts to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsGetAsync($account_num, $license_name = null, $trade_name = null, $ffl_number = null, $organization_name = null, $first_name = null, $middle_name = null, $last_name = null, $take = null, $skip = null)
    {
        return $this->accountNumApiContactsGetAsyncWithHttpInfo($account_num, $license_name, $trade_name, $ffl_number, $organization_name, $first_name, $middle_name, $last_name, $take, $skip)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsGetAsyncWithHttpInfo
     *
     * Retrieves the account's contacts.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $license_name Optional query parameter to search for a specific license name. (optional)
     * @param  string $trade_name Optional query parameter to search for a specific trade name. (optional)
     * @param  string $ffl_number Optional query parameter to search for a specific FFL number. (optional)
     * @param  string $organization_name Optional query parameter to search for a specific organization name. (optional)
     * @param  string $first_name Optional query parameter to search for a specific first name. (optional)
     * @param  string $middle_name Optional query parameter to search for a specific middle name. (optional)
     * @param  string $last_name Optional query parameter to search for a specific last name. (optional)
     * @param  int $take Optional query parameter to specify the number of contacts to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsGetAsyncWithHttpInfo($account_num, $license_name = null, $trade_name = null, $ffl_number = null, $organization_name = null, $first_name = null, $middle_name = null, $last_name = null, $take = null, $skip = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetAllCommand';
        $request = $this->accountNumApiContactsGetRequest($account_num, $license_name, $trade_name, $ffl_number, $organization_name, $first_name, $middle_name, $last_name, $take, $skip);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsGet'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $license_name Optional query parameter to search for a specific license name. (optional)
     * @param  string $trade_name Optional query parameter to search for a specific trade name. (optional)
     * @param  string $ffl_number Optional query parameter to search for a specific FFL number. (optional)
     * @param  string $organization_name Optional query parameter to search for a specific organization name. (optional)
     * @param  string $first_name Optional query parameter to search for a specific first name. (optional)
     * @param  string $middle_name Optional query parameter to search for a specific middle name. (optional)
     * @param  string $last_name Optional query parameter to search for a specific last name. (optional)
     * @param  int $take Optional query parameter to specify the number of contacts to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsGetRequest($account_num, $license_name = null, $trade_name = null, $ffl_number = null, $organization_name = null, $first_name = null, $middle_name = null, $last_name = null, $take = null, $skip = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($license_name !== null) {
            $queryParams['licenseName'] = ObjectSerializer::toQueryValue($license_name, null);
        }
        // query params
        if ($trade_name !== null) {
            $queryParams['tradeName'] = ObjectSerializer::toQueryValue($trade_name, null);
        }
        // query params
        if ($ffl_number !== null) {
            $queryParams['fflNumber'] = ObjectSerializer::toQueryValue($ffl_number, null);
        }
        // query params
        if ($organization_name !== null) {
            $queryParams['organizationName'] = ObjectSerializer::toQueryValue($organization_name, null);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['firstName'] = ObjectSerializer::toQueryValue($first_name, null);
        }
        // query params
        if ($middle_name !== null) {
            $queryParams['middleName'] = ObjectSerializer::toQueryValue($middle_name, null);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['lastName'] = ObjectSerializer::toQueryValue($last_name, null);
        }
        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take, 'int32');
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsGetByExternalIdExternalIdGet
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel
     */
    public function accountNumApiContactsGetByExternalIdExternalIdGet($external_id, $account_num)
    {
        list($response) = $this->accountNumApiContactsGetByExternalIdExternalIdGetWithHttpInfo($external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiContactsGetByExternalIdExternalIdGetWithHttpInfo
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsGetByExternalIdExternalIdGetWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsGetByExternalIdExternalIdGetRequest($external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsGetByExternalIdExternalIdGetAsync
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsGetByExternalIdExternalIdGetAsync($external_id, $account_num)
    {
        return $this->accountNumApiContactsGetByExternalIdExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsGetByExternalIdExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified contact by External ID.
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsGetByExternalIdExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsGetByExternalIdExternalIdGetRequest($external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsGetByExternalIdExternalIdGet'
     *
     * @param  string $external_id The External ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsGetByExternalIdExternalIdGetRequest($external_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiContactsGetByExternalIdExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsGetByExternalIdExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/GetByExternalId/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdDelete
     *
     * Deletes the specified contact.
     *
     * @param  string $id The ID of the contact to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsIdDelete($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiContactsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsIdDeleteWithHttpInfo
     *
     * Deletes the specified contact.
     *
     * @param  string $id The ID of the contact to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdDeleteRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdDeleteAsync
     *
     * Deletes the specified contact.
     *
     * @param  string $id The ID of the contact to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdDeleteAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdDeleteAsyncWithHttpInfo
     *
     * Deletes the specified contact.
     *
     * @param  string $id The ID of the contact to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdDeleteRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdDelete'
     *
     * @param  string $id The ID of the contact to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdDeleteRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdGet
     *
     * Retrieves the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel
     */
    public function accountNumApiContactsIdGet($id, $account_num)
    {
        list($response) = $this->accountNumApiContactsIdGetWithHttpInfo($id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiContactsIdGetWithHttpInfo
     *
     * Retrieves the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdGetWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsIdGetRequest($id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdGetAsync
     *
     * Retrieves the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdGetAsync($id, $account_num)
    {
        return $this->accountNumApiContactsIdGetAsyncWithHttpInfo($id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdGetAsyncWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsIdGetRequest($id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdGet'
     *
     * @param  string $id The ID of the contact to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdGetRequest($id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdDelete
     *
     * Deletes a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsIdLicensesLicenseIdDelete($id, $license_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiContactsIdLicensesLicenseIdDeleteWithHttpInfo($id, $license_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdDeleteWithHttpInfo
     *
     * Deletes a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdLicensesLicenseIdDeleteWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdDeleteRequest($id, $license_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdDeleteAsync
     *
     * Deletes a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdDeleteAsync($id, $license_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsIdLicensesLicenseIdDeleteAsyncWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdDeleteAsyncWithHttpInfo
     *
     * Deletes a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdDeleteAsyncWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdDeleteRequest($id, $license_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdLicensesLicenseIdDelete'
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdLicensesLicenseIdDeleteRequest($id, $license_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdLicensesLicenseIdDelete'
            );
        }
        // verify the required parameter 'license_id' is set
        if ($license_id === null || (is_array($license_id) && count($license_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $license_id when calling accountNumApiContactsIdLicensesLicenseIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdLicensesLicenseIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsIdLicensesLicenseIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}/Licenses/{licenseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($license_id !== null) {
            $resourcePath = str_replace(
                '{' . 'licenseId' . '}',
                ObjectSerializer::toPathValue($license_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdGet
     *
     * Retrieves a license for the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand
     */
    public function accountNumApiContactsIdLicensesLicenseIdGet($id, $license_id, $account_num)
    {
        list($response) = $this->accountNumApiContactsIdLicensesLicenseIdGetWithHttpInfo($id, $license_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdGetWithHttpInfo
     *
     * Retrieves a license for the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdLicensesLicenseIdGetWithHttpInfo($id, $license_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdGetRequest($id, $license_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdGetAsync
     *
     * Retrieves a license for the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdGetAsync($id, $license_id, $account_num)
    {
        return $this->accountNumApiContactsIdLicensesLicenseIdGetAsyncWithHttpInfo($id, $license_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdGetAsyncWithHttpInfo
     *
     * Retrieves a license for the specified contact by unique ID.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdGetAsyncWithHttpInfo($id, $license_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactLicenseCommand';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdGetRequest($id, $license_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdLicensesLicenseIdGet'
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdLicensesLicenseIdGetRequest($id, $license_id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdLicensesLicenseIdGet'
            );
        }
        // verify the required parameter 'license_id' is set
        if ($license_id === null || (is_array($license_id) && count($license_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $license_id when calling accountNumApiContactsIdLicensesLicenseIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdLicensesLicenseIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}/Licenses/{licenseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($license_id !== null) {
            $resourcePath = str_replace(
                '{' . 'licenseId' . '}',
                ObjectSerializer::toPathValue($license_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdPut
     *
     * Edits a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsIdLicensesLicenseIdPut($id, $license_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiContactsIdLicensesLicenseIdPutWithHttpInfo($id, $license_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdPutWithHttpInfo
     *
     * Edits a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdLicensesLicenseIdPutWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdPutRequest($id, $license_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdPutAsync
     *
     * Edits a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdPutAsync($id, $license_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsIdLicensesLicenseIdPutAsyncWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdLicensesLicenseIdPutAsyncWithHttpInfo
     *
     * Edits a license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesLicenseIdPutAsyncWithHttpInfo($id, $license_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesLicenseIdPutRequest($id, $license_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdLicensesLicenseIdPut'
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $license_id The ID of the license to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdLicensesLicenseIdPutRequest($id, $license_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdLicensesLicenseIdPut'
            );
        }
        // verify the required parameter 'license_id' is set
        if ($license_id === null || (is_array($license_id) && count($license_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $license_id when calling accountNumApiContactsIdLicensesLicenseIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdLicensesLicenseIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsIdLicensesLicenseIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}/Licenses/{licenseId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($license_id !== null) {
            $resourcePath = str_replace(
                '{' . 'licenseId' . '}',
                ObjectSerializer::toPathValue($license_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdLicensesPost
     *
     * Creates a new license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsIdLicensesPost($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiContactsIdLicensesPostWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsIdLicensesPostWithHttpInfo
     *
     * Creates a new license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdLicensesPostWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesPostRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdLicensesPostAsync
     *
     * Creates a new license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesPostAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsIdLicensesPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdLicensesPostAsyncWithHttpInfo
     *
     * Creates a new license for the specified contact.
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdLicensesPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdLicensesPostRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdLicensesPost'
     *
     * @param  string $id The ID of the contact. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdLicensesPostRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdLicensesPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdLicensesPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsIdLicensesPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}/Licenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsIdPut
     *
     * Edits the specified contact.
     *
     * @param  string $id The ID of the contact to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsIdPut($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiContactsIdPutWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsIdPutWithHttpInfo
     *
     * Edits the specified contact.
     *
     * @param  string $id The ID of the contact to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsIdPutWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdPutRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsIdPutAsync
     *
     * Edits the specified contact.
     *
     * @param  string $id The ID of the contact to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdPutAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsIdPutAsyncWithHttpInfo
     *
     * Edits the specified contact.
     *
     * @param  string $id The ID of the contact to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsIdPutRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsIdPut'
     *
     * @param  string $id The ID of the contact to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsIdPutRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiContactsIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsMergePost
     *
     * Merges two contacts: the \"winning\" contact and the \"losing\" contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel
     */
    public function accountNumApiContactsMergePost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiContactsMergePostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiContactsMergePostWithHttpInfo
     *
     * Merges two contacts: the \"winning\" contact and the \"losing\" contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsMergePostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsMergePostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsMergePostAsync
     *
     * Merges two contacts: the \"winning\" contact and the \"losing\" contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsMergePostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsMergePostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsMergePostAsyncWithHttpInfo
     *
     * Merges two contacts: the \"winning\" contact and the \"losing\" contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsMergePostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1ContactsGetContactResponseModel';
        $request = $this->accountNumApiContactsMergePostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsMergePost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsMergePostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsMergePost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsMergePost'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts/Merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiContactsPost
     *
     * Creates a new contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiContactsPost($account_num, $x_audit_user)
    {
        $this->accountNumApiContactsPostWithHttpInfo($account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiContactsPostWithHttpInfo
     *
     * Creates a new contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiContactsPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiContactsPostAsync
     *
     * Creates a new contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiContactsPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiContactsPostAsyncWithHttpInfo
     *
     * Creates a new contact.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiContactsPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiContactsPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiContactsPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiContactsPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiContactsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiContactsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
