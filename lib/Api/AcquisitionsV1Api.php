<?php
/**
 * AcquisitionsV1Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AcquisitionsV1Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcquisitionsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdGet
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdGet($acquisition_external_id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsAcquisitionExternalIdGetWithHttpInfo($acquisition_external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdGetWithHttpInfo
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdGetWithHttpInfo($acquisition_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdGetAsync
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdGetAsync($acquisition_external_id, $account_num)
    {
        return $this->accountNumApiAcquisitionsAcquisitionExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsAcquisitionExternalIdGet'
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num)
    {
        // verify the required parameter 'acquisition_external_id' is set
        if ($acquisition_external_id === null || (is_array($acquisition_external_id) && count($acquisition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_external_id when calling accountNumApiAcquisitionsAcquisitionExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsAcquisitionExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{acquisitionExternalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($acquisition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionExternalId' . '}',
                ObjectSerializer::toPathValue($acquisition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet
     *
     * Retrieves an item by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_external_id The external ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet($acquisition_external_id, $acquisition_item_external_id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetWithHttpInfo($acquisition_external_id, $acquisition_item_external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetWithHttpInfo
     *
     * Retrieves an item by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_external_id The external ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetWithHttpInfo($acquisition_external_id, $acquisition_item_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand';
        $request = $this->accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetRequest($acquisition_external_id, $acquisition_item_external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetAsync
     *
     * Retrieves an item by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_external_id The external ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetAsync($acquisition_external_id, $acquisition_item_external_id, $account_num)
    {
        return $this->accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $acquisition_item_external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves an item by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_external_id The external ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $acquisition_item_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand';
        $request = $this->accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetRequest($acquisition_external_id, $acquisition_item_external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet'
     *
     * @param  string $acquisition_external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_external_id The external ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGetRequest($acquisition_external_id, $acquisition_item_external_id, $account_num)
    {
        // verify the required parameter 'acquisition_external_id' is set
        if ($acquisition_external_id === null || (is_array($acquisition_external_id) && count($acquisition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_external_id when calling accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet'
            );
        }
        // verify the required parameter 'acquisition_item_external_id' is set
        if ($acquisition_item_external_id === null || (is_array($acquisition_item_external_id) && count($acquisition_item_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_item_external_id when calling accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsAcquisitionExternalIdItemsAcquisitionItemExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{acquisitionExternalId}/Items/{acquisitionItemExternalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($acquisition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionExternalId' . '}',
                ObjectSerializer::toPathValue($acquisition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($acquisition_item_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionItemExternalId' . '}',
                ObjectSerializer::toPathValue($acquisition_item_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsCreateAndCommitPost
     *
     * Create and commit an acquisition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandResultCommittedAcquisitionModel
     */
    public function accountNumApiAcquisitionsCreateAndCommitPost($account_num, $x_audit_user, $list_acquired_items = null)
    {
        list($response) = $this->accountNumApiAcquisitionsCreateAndCommitPostWithHttpInfo($account_num, $x_audit_user, $list_acquired_items);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsCreateAndCommitPostWithHttpInfo
     *
     * Create and commit an acquisition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandResultCommittedAcquisitionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsCreateAndCommitPostWithHttpInfo($account_num, $x_audit_user, $list_acquired_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandResultCommittedAcquisitionModel';
        $request = $this->accountNumApiAcquisitionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_acquired_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandResultCommittedAcquisitionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsCreateAndCommitPostAsync
     *
     * Create and commit an acquisition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsCreateAndCommitPostAsync($account_num, $x_audit_user, $list_acquired_items = null)
    {
        return $this->accountNumApiAcquisitionsCreateAndCommitPostAsyncWithHttpInfo($account_num, $x_audit_user, $list_acquired_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsCreateAndCommitPostAsyncWithHttpInfo
     *
     * Create and commit an acquisition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsCreateAndCommitPostAsyncWithHttpInfo($account_num, $x_audit_user, $list_acquired_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCreateAndCommitAcquisitionCommandResultCommittedAcquisitionModel';
        $request = $this->accountNumApiAcquisitionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_acquired_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsCreateAndCommitPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_acquired_items = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsCreateAndCommitPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsCreateAndCommitPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/CreateAndCommit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($list_acquired_items !== null) {
            $queryParams['listAcquiredItems'] = ObjectSerializer::toQueryValue($list_acquired_items, null);
        }
        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet
     *
     * Retrieves an item by ID and the acquisition's external ID.
     *
     * @param  string $external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemByIdAndByAcquisitionExternalIdCommand
     */
    public function accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet($external_id, $acquisition_item_id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetWithHttpInfo($external_id, $acquisition_item_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetWithHttpInfo
     *
     * Retrieves an item by ID and the acquisition's external ID.
     *
     * @param  string $external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemByIdAndByAcquisitionExternalIdCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetWithHttpInfo($external_id, $acquisition_item_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemByIdAndByAcquisitionExternalIdCommand';
        $request = $this->accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetRequest($external_id, $acquisition_item_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemByIdAndByAcquisitionExternalIdCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetAsync
     *
     * Retrieves an item by ID and the acquisition's external ID.
     *
     * @param  string $external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetAsync($external_id, $acquisition_item_id, $account_num)
    {
        return $this->accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetAsyncWithHttpInfo($external_id, $acquisition_item_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetAsyncWithHttpInfo
     *
     * Retrieves an item by ID and the acquisition's external ID.
     *
     * @param  string $external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetAsyncWithHttpInfo($external_id, $acquisition_item_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemByIdAndByAcquisitionExternalIdCommand';
        $request = $this->accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetRequest($external_id, $acquisition_item_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet'
     *
     * @param  string $external_id The external ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGetRequest($external_id, $acquisition_item_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet'
            );
        }
        // verify the required parameter 'acquisition_item_id' is set
        if ($acquisition_item_id === null || (is_array($acquisition_item_id) && count($acquisition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_item_id when calling accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsExternalIdItemsAcquisitionItemIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{externalId}/Items/{acquisitionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($acquisition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionItemId' . '}',
                ObjectSerializer::toPathValue($acquisition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsGet
     *
     * Retrieves the account's acquisitions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of acquisitions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  string $id Optional query parameter to search for an acquisition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for an acquisition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for acquisitions with a specific acquisition type. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for acquisitions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for acquisitions with a specific invoice number. (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for acquisitions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_acquisition Optional query parameter to specify whether an acquisition is a manufacturing acquisition.              true means search for manufacturing acquisitions; false means search for non-manufacturing acquisitions. (optional)
     * @param  string $acquired_from_contact_id Optional query parameter to search for acquisitions by the acquire contact identifier. (optional)
     * @param  string $acquired_from_contact_external_id Optional query parameter to search for acquisitions by the acquire contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for an acquisition containing the acquisition item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for an acquisition containing the acquisition item with the given external identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAllCommand
     */
    public function accountNumApiAcquisitionsGet($account_num, $take = null, $skip = null, $id = null, $external_id = null, $type = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_acquisition = null, $acquired_from_contact_id = null, $acquired_from_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        list($response) = $this->accountNumApiAcquisitionsGetWithHttpInfo($account_num, $take, $skip, $id, $external_id, $type, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_acquisition, $acquired_from_contact_id, $acquired_from_contact_external_id, $item_id, $item_external_id);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsGetWithHttpInfo
     *
     * Retrieves the account's acquisitions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of acquisitions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  string $id Optional query parameter to search for an acquisition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for an acquisition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for acquisitions with a specific acquisition type. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for acquisitions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for acquisitions with a specific invoice number. (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for acquisitions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_acquisition Optional query parameter to specify whether an acquisition is a manufacturing acquisition.              true means search for manufacturing acquisitions; false means search for non-manufacturing acquisitions. (optional)
     * @param  string $acquired_from_contact_id Optional query parameter to search for acquisitions by the acquire contact identifier. (optional)
     * @param  string $acquired_from_contact_external_id Optional query parameter to search for acquisitions by the acquire contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for an acquisition containing the acquisition item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for an acquisition containing the acquisition item with the given external identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAllCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsGetWithHttpInfo($account_num, $take = null, $skip = null, $id = null, $external_id = null, $type = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_acquisition = null, $acquired_from_contact_id = null, $acquired_from_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAllCommand';
        $request = $this->accountNumApiAcquisitionsGetRequest($account_num, $take, $skip, $id, $external_id, $type, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_acquisition, $acquired_from_contact_id, $acquired_from_contact_external_id, $item_id, $item_external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAllCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsGetAsync
     *
     * Retrieves the account's acquisitions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of acquisitions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  string $id Optional query parameter to search for an acquisition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for an acquisition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for acquisitions with a specific acquisition type. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for acquisitions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for acquisitions with a specific invoice number. (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for acquisitions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_acquisition Optional query parameter to specify whether an acquisition is a manufacturing acquisition.              true means search for manufacturing acquisitions; false means search for non-manufacturing acquisitions. (optional)
     * @param  string $acquired_from_contact_id Optional query parameter to search for acquisitions by the acquire contact identifier. (optional)
     * @param  string $acquired_from_contact_external_id Optional query parameter to search for acquisitions by the acquire contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for an acquisition containing the acquisition item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for an acquisition containing the acquisition item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsGetAsync($account_num, $take = null, $skip = null, $id = null, $external_id = null, $type = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_acquisition = null, $acquired_from_contact_id = null, $acquired_from_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        return $this->accountNumApiAcquisitionsGetAsyncWithHttpInfo($account_num, $take, $skip, $id, $external_id, $type, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_acquisition, $acquired_from_contact_id, $acquired_from_contact_external_id, $item_id, $item_external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsGetAsyncWithHttpInfo
     *
     * Retrieves the account's acquisitions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of acquisitions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  string $id Optional query parameter to search for an acquisition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for an acquisition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for acquisitions with a specific acquisition type. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for acquisitions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for acquisitions with a specific invoice number. (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for acquisitions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_acquisition Optional query parameter to specify whether an acquisition is a manufacturing acquisition.              true means search for manufacturing acquisitions; false means search for non-manufacturing acquisitions. (optional)
     * @param  string $acquired_from_contact_id Optional query parameter to search for acquisitions by the acquire contact identifier. (optional)
     * @param  string $acquired_from_contact_external_id Optional query parameter to search for acquisitions by the acquire contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for an acquisition containing the acquisition item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for an acquisition containing the acquisition item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsGetAsyncWithHttpInfo($account_num, $take = null, $skip = null, $id = null, $external_id = null, $type = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_acquisition = null, $acquired_from_contact_id = null, $acquired_from_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAllCommand';
        $request = $this->accountNumApiAcquisitionsGetRequest($account_num, $take, $skip, $id, $external_id, $type, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_acquisition, $acquired_from_contact_id, $acquired_from_contact_external_id, $item_id, $item_external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsGet'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of acquisitions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  string $id Optional query parameter to search for an acquisition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for an acquisition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for acquisitions with a specific acquisition type. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for acquisitions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for acquisitions with a specific invoice number. (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for acquisitions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_acquisition Optional query parameter to specify whether an acquisition is a manufacturing acquisition.              true means search for manufacturing acquisitions; false means search for non-manufacturing acquisitions. (optional)
     * @param  string $acquired_from_contact_id Optional query parameter to search for acquisitions by the acquire contact identifier. (optional)
     * @param  string $acquired_from_contact_external_id Optional query parameter to search for acquisitions by the acquire contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for an acquisition containing the acquisition item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for an acquisition containing the acquisition item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsGetRequest($account_num, $take = null, $skip = null, $id = null, $external_id = null, $type = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_acquisition = null, $acquired_from_contact_id = null, $acquired_from_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take, 'int32');
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, 'uuid');
        }
        // query params
        if ($external_id !== null) {
            $queryParams['externalId'] = ObjectSerializer::toQueryValue($external_id, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($purchase_order_number !== null) {
            $queryParams['purchaseOrderNumber'] = ObjectSerializer::toQueryValue($purchase_order_number, null);
        }
        // query params
        if ($invoice_number !== null) {
            $queryParams['invoiceNumber'] = ObjectSerializer::toQueryValue($invoice_number, null);
        }
        // query params
        if ($shipment_tracking_number !== null) {
            $queryParams['shipmentTrackingNumber'] = ObjectSerializer::toQueryValue($shipment_tracking_number, null);
        }
        // query params
        if ($is_manufacturing_acquisition !== null) {
            $queryParams['isManufacturingAcquisition'] = ObjectSerializer::toQueryValue($is_manufacturing_acquisition, null);
        }
        // query params
        if ($acquired_from_contact_id !== null) {
            $queryParams['acquiredFromContactId'] = ObjectSerializer::toQueryValue($acquired_from_contact_id, 'uuid');
        }
        // query params
        if ($acquired_from_contact_external_id !== null) {
            $queryParams['acquiredFromContactExternalId'] = ObjectSerializer::toQueryValue($acquired_from_contact_external_id, null);
        }
        // query params
        if ($item_id !== null) {
            $queryParams['itemId'] = ObjectSerializer::toQueryValue($item_id, 'uuid');
        }
        // query params
        if ($item_external_id !== null) {
            $queryParams['itemExternalId'] = ObjectSerializer::toQueryValue($item_external_id, null);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGet
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel
     */
    public function accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGet($acquisition_external_id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetWithHttpInfo($acquisition_external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetWithHttpInfo
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetWithHttpInfo($acquisition_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetAsync
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetAsync($acquisition_external_id, $account_num)
    {
        return $this->accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves an acquisition by external ID.
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetAsyncWithHttpInfo($acquisition_external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGet'
     *
     * @param  string $acquisition_external_id The external ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGetRequest($acquisition_external_id, $account_num)
    {
        // verify the required parameter 'acquisition_external_id' is set
        if ($acquisition_external_id === null || (is_array($acquisition_external_id) && count($acquisition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_external_id when calling accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsGetByExternalIdAcquisitionExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/GetByExternalId/{acquisitionExternalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($acquisition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionExternalId' . '}',
                ObjectSerializer::toPathValue($acquisition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdAttachContactContactIdPut
     *
     * Attaches a contact to an acquisition.
     *
     * @param  string $id &lt;br&gt;The ID of the acquisition.  &lt;br&gt;NOTE: changing the contact on a manufacturing acquisition is not allowed. (required)
     * @param  string $contact_id The ID of the contact to attach to the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdAttachContactContactIdPut($id, $contact_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdAttachContactContactIdPutWithHttpInfo($id, $contact_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdAttachContactContactIdPutWithHttpInfo
     *
     * Attaches a contact to an acquisition.
     *
     * @param  string $id &lt;br&gt;The ID of the acquisition.  &lt;br&gt;NOTE: changing the contact on a manufacturing acquisition is not allowed. (required)
     * @param  string $contact_id The ID of the contact to attach to the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdAttachContactContactIdPutWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdAttachContactContactIdPutAsync
     *
     * Attaches a contact to an acquisition.
     *
     * @param  string $id &lt;br&gt;The ID of the acquisition.  &lt;br&gt;NOTE: changing the contact on a manufacturing acquisition is not allowed. (required)
     * @param  string $contact_id The ID of the contact to attach to the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdAttachContactContactIdPutAsync($id, $contact_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdAttachContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdAttachContactContactIdPutAsyncWithHttpInfo
     *
     * Attaches a contact to an acquisition.
     *
     * @param  string $id &lt;br&gt;The ID of the acquisition.  &lt;br&gt;NOTE: changing the contact on a manufacturing acquisition is not allowed. (required)
     * @param  string $contact_id The ID of the contact to attach to the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdAttachContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdAttachContactContactIdPut'
     *
     * @param  string $id &lt;br&gt;The ID of the acquisition.  &lt;br&gt;NOTE: changing the contact on a manufacturing acquisition is not allowed. (required)
     * @param  string $contact_id The ID of the contact to attach to the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling accountNumApiAcquisitionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdAttachContactContactIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/AttachContact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdCommitPost
     *
     * Commits an acquisition.
     *
     * @param  string $id The ID of the acquisition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCommitAcquisitionCommandResultCommittedAcquisitionModel
     */
    public function accountNumApiAcquisitionsIdCommitPost($id, $account_num, $x_audit_user, $list_acquired_items = null)
    {
        list($response) = $this->accountNumApiAcquisitionsIdCommitPostWithHttpInfo($id, $account_num, $x_audit_user, $list_acquired_items);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsIdCommitPostWithHttpInfo
     *
     * Commits an acquisition.
     *
     * @param  string $id The ID of the acquisition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCommitAcquisitionCommandResultCommittedAcquisitionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdCommitPostWithHttpInfo($id, $account_num, $x_audit_user, $list_acquired_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCommitAcquisitionCommandResultCommittedAcquisitionModel';
        $request = $this->accountNumApiAcquisitionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_acquired_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCommitAcquisitionCommandResultCommittedAcquisitionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdCommitPostAsync
     *
     * Commits an acquisition.
     *
     * @param  string $id The ID of the acquisition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdCommitPostAsync($id, $account_num, $x_audit_user, $list_acquired_items = null)
    {
        return $this->accountNumApiAcquisitionsIdCommitPostAsyncWithHttpInfo($id, $account_num, $x_audit_user, $list_acquired_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdCommitPostAsyncWithHttpInfo
     *
     * Commits an acquisition.
     *
     * @param  string $id The ID of the acquisition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdCommitPostAsyncWithHttpInfo($id, $account_num, $x_audit_user, $list_acquired_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsCommitAcquisitionCommandResultCommittedAcquisitionModel';
        $request = $this->accountNumApiAcquisitionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_acquired_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdCommitPost'
     *
     * @param  string $id The ID of the acquisition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_acquired_items &lt;br&gt;If true, returns an array of the acquired items, as well as the acquisition Id and contact Id. Upon success,              the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_acquired_items = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdCommitPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdCommitPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdCommitPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($list_acquired_items !== null) {
            $queryParams['listAcquiredItems'] = ObjectSerializer::toQueryValue($list_acquired_items, null);
        }
        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdDelete
     *
     * Deletes an acquisition.
     *
     * @param  string $id The ID of the acquisition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdDelete($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdDeleteWithHttpInfo
     *
     * Deletes an acquisition.
     *
     * @param  string $id The ID of the acquisition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdDeleteRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdDeleteAsync
     *
     * Deletes an acquisition.
     *
     * @param  string $id The ID of the acquisition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdDeleteAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdDeleteAsyncWithHttpInfo
     *
     * Deletes an acquisition.
     *
     * @param  string $id The ID of the acquisition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdDeleteRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdDelete'
     *
     * @param  string $id The ID of the acquisition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdDeleteRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdGet
     *
     * Retrieves an acquisition by ID.
     *
     * @param  string $id The ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel
     */
    public function accountNumApiAcquisitionsIdGet($id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsIdGetWithHttpInfo($id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsIdGetWithHttpInfo
     *
     * Retrieves an acquisition by ID.
     *
     * @param  string $id The ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdGetWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsIdGetRequest($id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdGetAsync
     *
     * Retrieves an acquisition by ID.
     *
     * @param  string $id The ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdGetAsync($id, $account_num)
    {
        return $this->accountNumApiAcquisitionsIdGetAsyncWithHttpInfo($id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdGetAsyncWithHttpInfo
     *
     * Retrieves an acquisition by ID.
     *
     * @param  string $id The ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdGetAsyncWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsIdGetRequest($id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdGet'
     *
     * @param  string $id The ID of the acquisition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdGetRequest($id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete
     *
     * Deletes an item from an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteWithHttpInfo
     *
     * Deletes an item from an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteRequest($id, $acquisition_item_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteAsync
     *
     * Deletes an item from an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteAsync($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteAsyncWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteAsyncWithHttpInfo
     *
     * Deletes an item from an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteAsyncWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteRequest($id, $acquisition_item_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete'
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdItemsAcquisitionItemIdDeleteRequest($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete'
            );
        }
        // verify the required parameter 'acquisition_item_id' is set
        if ($acquisition_item_id === null || (is_array($acquisition_item_id) && count($acquisition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_item_id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Items/{acquisitionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($acquisition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionItemId' . '}',
                ObjectSerializer::toPathValue($acquisition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet
     *
     * Retrieves an item by ID.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet($id, $acquisition_item_id, $account_num)
    {
        list($response) = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetWithHttpInfo($id, $acquisition_item_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetWithHttpInfo
     *
     * Retrieves an item by ID.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetWithHttpInfo($id, $acquisition_item_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetRequest($id, $acquisition_item_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetAsync
     *
     * Retrieves an item by ID.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetAsync($id, $acquisition_item_id, $account_num)
    {
        return $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetAsyncWithHttpInfo($id, $acquisition_item_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetAsyncWithHttpInfo
     *
     * Retrieves an item by ID.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetAsyncWithHttpInfo($id, $acquisition_item_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionItemCommand';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetRequest($id, $acquisition_item_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet'
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdItemsAcquisitionItemIdGetRequest($id, $acquisition_item_id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet'
            );
        }
        // verify the required parameter 'acquisition_item_id' is set
        if ($acquisition_item_id === null || (is_array($acquisition_item_id) && count($acquisition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_item_id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Items/{acquisitionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($acquisition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionItemId' . '}',
                ObjectSerializer::toPathValue($acquisition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut
     *
     * Edits an item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutWithHttpInfo
     *
     * Edits an item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutRequest($id, $acquisition_item_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutAsync
     *
     * Edits an item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutAsync($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutAsyncWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutAsyncWithHttpInfo
     *
     * Edits an item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutAsyncWithHttpInfo($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutRequest($id, $acquisition_item_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut'
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $acquisition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdItemsAcquisitionItemIdPutRequest($id, $acquisition_item_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut'
            );
        }
        // verify the required parameter 'acquisition_item_id' is set
        if ($acquisition_item_id === null || (is_array($acquisition_item_id) && count($acquisition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisition_item_id when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdItemsAcquisitionItemIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Items/{acquisitionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($acquisition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'acquisitionItemId' . '}',
                ObjectSerializer::toPathValue($acquisition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsMultiplePost
     *
     * Add multiple items to an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdItemsMultiplePost($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdItemsMultiplePostWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsMultiplePostWithHttpInfo
     *
     * Add multiple items to an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdItemsMultiplePostWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsMultiplePostRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsMultiplePostAsync
     *
     * Add multiple items to an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsMultiplePostAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdItemsMultiplePostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsMultiplePostAsyncWithHttpInfo
     *
     * Add multiple items to an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsMultiplePostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsMultiplePostRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdItemsMultiplePost'
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdItemsMultiplePostRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdItemsMultiplePost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdItemsMultiplePost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdItemsMultiplePost'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Items/Multiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsPost
     *
     * Creates a new item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdItemsPost($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdItemsPostWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsPostWithHttpInfo
     *
     * Creates a new item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdItemsPostWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsPostRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsPostAsync
     *
     * Creates a new item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsPostAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdItemsPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdItemsPostAsyncWithHttpInfo
     *
     * Creates a new item for an acquisition.
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdItemsPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdItemsPostRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdItemsPost'
     *
     * @param  string $id The ID of the acquisition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdItemsPostRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdItemsPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdItemsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdItemsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsIdPut
     *
     * Edits an acquisition.
     *
     * @param  string $id The ID of the acquisition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiAcquisitionsIdPut($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiAcquisitionsIdPutWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiAcquisitionsIdPutWithHttpInfo
     *
     * Edits an acquisition.
     *
     * @param  string $id The ID of the acquisition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsIdPutWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdPutRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsIdPutAsync
     *
     * Edits an acquisition.
     *
     * @param  string $id The ID of the acquisition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdPutAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsIdPutAsyncWithHttpInfo
     *
     * Edits an acquisition.
     *
     * @param  string $id The ID of the acquisition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiAcquisitionsIdPutRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsIdPut'
     *
     * @param  string $id The ID of the acquisition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsIdPutRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiAcquisitionsIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiAcquisitionsPost
     *
     * Creates a new acquisition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel
     */
    public function accountNumApiAcquisitionsPost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiAcquisitionsPostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiAcquisitionsPostWithHttpInfo
     *
     * Creates a new acquisition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiAcquisitionsPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiAcquisitionsPostAsync
     *
     * Creates a new acquisition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiAcquisitionsPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiAcquisitionsPostAsyncWithHttpInfo
     *
     * Creates a new acquisition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiAcquisitionsPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1AcquisitionsGetAcquisitionResponseModel';
        $request = $this->accountNumApiAcquisitionsPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiAcquisitionsPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiAcquisitionsPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiAcquisitionsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiAcquisitionsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Acquisitions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
