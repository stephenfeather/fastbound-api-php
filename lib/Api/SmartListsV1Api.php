<?php
/**
 * SmartListsV1Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SmartListsV1Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmartListsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountNumApiSmartListsAcquireTypeGet
     *
     * Retrieves the Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsAcquireTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsAcquireTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsAcquireTypeGetWithHttpInfo
     *
     * Retrieves the Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsAcquireTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsAcquireTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsAcquireTypeGetAsync
     *
     * Retrieves the Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsAcquireTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsAcquireTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsAcquireTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsAcquireTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsAcquireTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsAcquireTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsAcquireTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsAcquireTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/AcquireType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsCaliberGet
     *
     * Retrieves the Caliber smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsCaliberGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsCaliberGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsCaliberGetWithHttpInfo
     *
     * Retrieves the Caliber smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsCaliberGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsCaliberGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsCaliberGetAsync
     *
     * Retrieves the Caliber smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsCaliberGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsCaliberGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsCaliberGetAsyncWithHttpInfo
     *
     * Retrieves the Caliber smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsCaliberGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsCaliberGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsCaliberGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsCaliberGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsCaliberGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/Caliber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsConditionGet
     *
     * Retrieves the Condition smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsConditionGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsConditionGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsConditionGetWithHttpInfo
     *
     * Retrieves the Condition smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsConditionGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsConditionGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsConditionGetAsync
     *
     * Retrieves the Condition smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsConditionGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsConditionGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsConditionGetAsyncWithHttpInfo
     *
     * Retrieves the Condition smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsConditionGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsConditionGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsConditionGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsConditionGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsConditionGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/Condition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsCountryOfManufactureGet
     *
     * Retrieves the Country of Manufacture smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsCountryOfManufactureGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsCountryOfManufactureGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsCountryOfManufactureGetWithHttpInfo
     *
     * Retrieves the Country of Manufacture smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsCountryOfManufactureGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsCountryOfManufactureGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsCountryOfManufactureGetAsync
     *
     * Retrieves the Country of Manufacture smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsCountryOfManufactureGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsCountryOfManufactureGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsCountryOfManufactureGetAsyncWithHttpInfo
     *
     * Retrieves the Country of Manufacture smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsCountryOfManufactureGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsCountryOfManufactureGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsCountryOfManufactureGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsCountryOfManufactureGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsCountryOfManufactureGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/CountryOfManufacture';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsDeleteTypeGet
     *
     * Retrieves the Delete Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsDeleteTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsDeleteTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsDeleteTypeGetWithHttpInfo
     *
     * Retrieves the Delete Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsDeleteTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsDeleteTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsDeleteTypeGetAsync
     *
     * Retrieves the Delete Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsDeleteTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsDeleteTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsDeleteTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Delete Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsDeleteTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsDeleteTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsDeleteTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsDeleteTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsDeleteTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/DeleteType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsDisposeTypeGet
     *
     * Retrieves the Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsDisposeTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsDisposeTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsDisposeTypeGetWithHttpInfo
     *
     * Retrieves the Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsDisposeTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsDisposeTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsDisposeTypeGetAsync
     *
     * Retrieves the Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsDisposeTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsDisposeTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsDisposeTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsDisposeTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsDisposeTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsDisposeTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsDisposeTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsDisposeTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/DisposeType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsImporterGet
     *
     * Retrieves the Importer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsImporterGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsImporterGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsImporterGetWithHttpInfo
     *
     * Retrieves the Importer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsImporterGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsImporterGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsImporterGetAsync
     *
     * Retrieves the Importer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsImporterGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsImporterGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsImporterGetAsyncWithHttpInfo
     *
     * Retrieves the Importer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsImporterGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsImporterGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsImporterGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsImporterGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsImporterGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/Importer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsItemTypeGet
     *
     * Retrieves the Item Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsItemTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsItemTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsItemTypeGetWithHttpInfo
     *
     * Retrieves the Item Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsItemTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsItemTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsItemTypeGetAsync
     *
     * Retrieves the Item Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsItemTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsItemTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsItemTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Item Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsItemTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsItemTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsItemTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsItemTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsItemTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/ItemType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsLicenseTypeGet
     *
     * Retrieves the License Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsLicenseTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsLicenseTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsLicenseTypeGetWithHttpInfo
     *
     * Retrieves the License Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsLicenseTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsLicenseTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsLicenseTypeGetAsync
     *
     * Retrieves the License Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsLicenseTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsLicenseTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsLicenseTypeGetAsyncWithHttpInfo
     *
     * Retrieves the License Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsLicenseTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsLicenseTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsLicenseTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsLicenseTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsLicenseTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/LicenseType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsLocationGet
     *
     * Retrieves the Location smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsLocationGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsLocationGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsLocationGetWithHttpInfo
     *
     * Retrieves the Location smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsLocationGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsLocationGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsLocationGetAsync
     *
     * Retrieves the Location smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsLocationGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsLocationGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsLocationGetAsyncWithHttpInfo
     *
     * Retrieves the Location smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsLocationGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsLocationGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsLocationGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsLocationGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsLocationGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/Location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsManufacturerGet
     *
     * Retrieves the Manufacturer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsManufacturerGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsManufacturerGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsManufacturerGetWithHttpInfo
     *
     * Retrieves the Manufacturer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsManufacturerGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturerGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsManufacturerGetAsync
     *
     * Retrieves the Manufacturer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturerGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsManufacturerGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsManufacturerGetAsyncWithHttpInfo
     *
     * Retrieves the Manufacturer smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturerGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturerGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsManufacturerGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsManufacturerGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsManufacturerGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/Manufacturer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsManufacturingAcquireTypeGet
     *
     * Retrieves the Manufacturing Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsManufacturingAcquireTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsManufacturingAcquireTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsManufacturingAcquireTypeGetWithHttpInfo
     *
     * Retrieves the Manufacturing Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsManufacturingAcquireTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturingAcquireTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsManufacturingAcquireTypeGetAsync
     *
     * Retrieves the Manufacturing Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturingAcquireTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsManufacturingAcquireTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsManufacturingAcquireTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Manufacturing Acquire Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturingAcquireTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturingAcquireTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsManufacturingAcquireTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsManufacturingAcquireTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsManufacturingAcquireTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/ManufacturingAcquireType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsManufacturingDisposeTypeGet
     *
     * Retrieves the Manufacturing Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsManufacturingDisposeTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsManufacturingDisposeTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsManufacturingDisposeTypeGetWithHttpInfo
     *
     * Retrieves the Manufacturing Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsManufacturingDisposeTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturingDisposeTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsManufacturingDisposeTypeGetAsync
     *
     * Retrieves the Manufacturing Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturingDisposeTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsManufacturingDisposeTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsManufacturingDisposeTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Manufacturing Dispose Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsManufacturingDisposeTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsManufacturingDisposeTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsManufacturingDisposeTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsManufacturingDisposeTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsManufacturingDisposeTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/ManufacturingDisposeType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiSmartListsTheftLossTypeGet
     *
     * Retrieves the Theft/Loss Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand
     */
    public function accountNumApiSmartListsTheftLossTypeGet($account_num)
    {
        list($response) = $this->accountNumApiSmartListsTheftLossTypeGetWithHttpInfo($account_num);
        return $response;
    }

    /**
     * Operation accountNumApiSmartListsTheftLossTypeGetWithHttpInfo
     *
     * Retrieves the Theft/Loss Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiSmartListsTheftLossTypeGetWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsTheftLossTypeGetRequest($account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiSmartListsTheftLossTypeGetAsync
     *
     * Retrieves the Theft/Loss Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsTheftLossTypeGetAsync($account_num)
    {
        return $this->accountNumApiSmartListsTheftLossTypeGetAsyncWithHttpInfo($account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiSmartListsTheftLossTypeGetAsyncWithHttpInfo
     *
     * Retrieves the Theft/Loss Type smart list.
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiSmartListsTheftLossTypeGetAsyncWithHttpInfo($account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1SmartListsGetSmartListsCommand';
        $request = $this->accountNumApiSmartListsTheftLossTypeGetRequest($account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiSmartListsTheftLossTypeGet'
     *
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiSmartListsTheftLossTypeGetRequest($account_num)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiSmartListsTheftLossTypeGet'
            );
        }

        $resourcePath = '/{accountNum}/api/SmartLists/TheftLossType';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
