<?php
/**
 * DispositionsV1Api
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FastBound API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.62
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DispositionsV1Api Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DispositionsV1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountNumApiDispositionsCreateAndCommitPost
     *
     * Create and commit a disposition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandResultCommittedDispositionModel
     */
    public function accountNumApiDispositionsCreateAndCommitPost($account_num, $x_audit_user, $list_disposed_items = null)
    {
        list($response) = $this->accountNumApiDispositionsCreateAndCommitPostWithHttpInfo($account_num, $x_audit_user, $list_disposed_items);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsCreateAndCommitPostWithHttpInfo
     *
     * Create and commit a disposition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandResultCommittedDispositionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsCreateAndCommitPostWithHttpInfo($account_num, $x_audit_user, $list_disposed_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandResultCommittedDispositionModel';
        $request = $this->accountNumApiDispositionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_disposed_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandResultCommittedDispositionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsCreateAndCommitPostAsync
     *
     * Create and commit a disposition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsCreateAndCommitPostAsync($account_num, $x_audit_user, $list_disposed_items = null)
    {
        return $this->accountNumApiDispositionsCreateAndCommitPostAsyncWithHttpInfo($account_num, $x_audit_user, $list_disposed_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsCreateAndCommitPostAsyncWithHttpInfo
     *
     * Create and commit a disposition in a single request.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsCreateAndCommitPostAsyncWithHttpInfo($account_num, $x_audit_user, $list_disposed_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCreateAndCommitDispositionCommandResultCommittedDispositionModel';
        $request = $this->accountNumApiDispositionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_disposed_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsCreateAndCommitPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsCreateAndCommitPostRequest($account_num, $x_audit_user, $list_disposed_items = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsCreateAndCommitPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsCreateAndCommitPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/CreateAndCommit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($list_disposed_items !== null) {
            $queryParams['listDisposedItems'] = ObjectSerializer::toQueryValue($list_disposed_items, null);
        }
        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsDestroyedPost
     *
     * Creates a new Destroyed disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsDestroyedPost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsDestroyedPostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsDestroyedPostWithHttpInfo
     *
     * Creates a new Destroyed disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsDestroyedPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsDestroyedPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsDestroyedPostAsync
     *
     * Creates a new Destroyed disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDestroyedPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsDestroyedPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsDestroyedPostAsyncWithHttpInfo
     *
     * Creates a new Destroyed disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDestroyedPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsDestroyedPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsDestroyedPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsDestroyedPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsDestroyedPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsDestroyedPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/Destroyed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost($disposition_external_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostWithHttpInfo
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostRequest($disposition_external_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostAsync
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostAsync($disposition_external_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostAsyncWithHttpInfo
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostRequest($disposition_external_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost'
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPostRequest($disposition_external_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'disposition_external_id' is set
        if ($disposition_external_id === null || (is_array($disposition_external_id) && count($disposition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disposition_external_id when calling accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsDispositionExternalIdItemsAddByExternalIdPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{dispositionExternalId}/Items/AddByExternalId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($disposition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispositionExternalId' . '}',
                ObjectSerializer::toPathValue($disposition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost
     *
     * Add items to the specified disposition using search parameters. If multiple items match, you must specify  whether to use the first or last matching item (by Acquire Date). Search parameters must match exactly.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost($disposition_external_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostWithHttpInfo
     *
     * Add items to the specified disposition using search parameters. If multiple items match, you must specify  whether to use the first or last matching item (by Acquire Date). Search parameters must match exactly.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostRequest($disposition_external_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostAsync
     *
     * Add items to the specified disposition using search parameters. If multiple items match, you must specify  whether to use the first or last matching item (by Acquire Date). Search parameters must match exactly.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostAsync($disposition_external_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostAsyncWithHttpInfo
     *
     * Add items to the specified disposition using search parameters. If multiple items match, you must specify  whether to use the first or last matching item (by Acquire Date). Search parameters must match exactly.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostRequest($disposition_external_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost'
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPostRequest($disposition_external_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'disposition_external_id' is set
        if ($disposition_external_id === null || (is_array($disposition_external_id) && count($disposition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disposition_external_id when calling accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsDispositionExternalIdItemsAddBySearchPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{dispositionExternalId}/Items/AddBySearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($disposition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispositionExternalId' . '}',
                ObjectSerializer::toPathValue($disposition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsPost
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsPost($disposition_external_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsDispositionExternalIdItemsPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsPostWithHttpInfo
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsPostWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsPostRequest($disposition_external_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsPostAsync
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsPostAsync($disposition_external_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsDispositionExternalIdItemsPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsDispositionExternalIdItemsPostAsyncWithHttpInfo
     *
     * Add items to the specified disposition, using external identifiers.
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsDispositionExternalIdItemsPostAsyncWithHttpInfo($disposition_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsDispositionExternalIdItemsPostRequest($disposition_external_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsDispositionExternalIdItemsPost'
     *
     * @param  string $disposition_external_id The external ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsDispositionExternalIdItemsPostRequest($disposition_external_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'disposition_external_id' is set
        if ($disposition_external_id === null || (is_array($disposition_external_id) && count($disposition_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disposition_external_id when calling accountNumApiDispositionsDispositionExternalIdItemsPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsDispositionExternalIdItemsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsDispositionExternalIdItemsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{dispositionExternalId}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($disposition_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispositionExternalId' . '}',
                ObjectSerializer::toPathValue($disposition_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsExternalIdGet
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsExternalIdGet($external_id, $account_num)
    {
        list($response) = $this->accountNumApiDispositionsExternalIdGetWithHttpInfo($external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsExternalIdGetWithHttpInfo
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsExternalIdGetWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsExternalIdGetRequest($external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsExternalIdGetAsync
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsExternalIdGetAsync($external_id, $account_num)
    {
        return $this->accountNumApiDispositionsExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsExternalIdGetRequest($external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsExternalIdGet'
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsExternalIdGetRequest($external_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiDispositionsExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsGet
     *
     * Retrieves the account's dispositions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include4473 If true, return both pending dispositions and dispositions tied to 4473s; otherwise, only return pending (non-4473) dispositions. Default is false. (optional)
     * @param  string $id Optional query parameter to search for a disposition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for a disposition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for dispositions with a specific disposition type. (optional)
     * @param  string $ttsn Optional query parameter to search for dispositions with a specific TTSN. (optional)
     * @param  string $otsn Optional query parameter to search for dispositions with a specific OTSN. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for dispositions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for dispositions with a specific invoice number (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for dispositions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_disposition Optional query parameter to specify whether an disposition is a manufacturing disposition.              true means search for manufacturing dispositions; false means search for non-manufacturing dispositions. (optional)
     * @param  string $disposed_to_contact_id Optional query parameter to search for dispositions by the dispose contact identifier. (optional)
     * @param  string $disposed_to_contact_external_id Optional query parameter to search for dispositions by the dispose contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for a disposition containing the item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for a disposition containing the item with the given external identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAllCommand
     */
    public function accountNumApiDispositionsGet($account_num, $take = null, $skip = null, $include4473 = null, $id = null, $external_id = null, $type = null, $ttsn = null, $otsn = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_disposition = null, $disposed_to_contact_id = null, $disposed_to_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        list($response) = $this->accountNumApiDispositionsGetWithHttpInfo($account_num, $take, $skip, $include4473, $id, $external_id, $type, $ttsn, $otsn, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_disposition, $disposed_to_contact_id, $disposed_to_contact_external_id, $item_id, $item_external_id);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsGetWithHttpInfo
     *
     * Retrieves the account's dispositions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include4473 If true, return both pending dispositions and dispositions tied to 4473s; otherwise, only return pending (non-4473) dispositions. Default is false. (optional)
     * @param  string $id Optional query parameter to search for a disposition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for a disposition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for dispositions with a specific disposition type. (optional)
     * @param  string $ttsn Optional query parameter to search for dispositions with a specific TTSN. (optional)
     * @param  string $otsn Optional query parameter to search for dispositions with a specific OTSN. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for dispositions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for dispositions with a specific invoice number (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for dispositions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_disposition Optional query parameter to specify whether an disposition is a manufacturing disposition.              true means search for manufacturing dispositions; false means search for non-manufacturing dispositions. (optional)
     * @param  string $disposed_to_contact_id Optional query parameter to search for dispositions by the dispose contact identifier. (optional)
     * @param  string $disposed_to_contact_external_id Optional query parameter to search for dispositions by the dispose contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for a disposition containing the item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for a disposition containing the item with the given external identifier. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAllCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsGetWithHttpInfo($account_num, $take = null, $skip = null, $include4473 = null, $id = null, $external_id = null, $type = null, $ttsn = null, $otsn = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_disposition = null, $disposed_to_contact_id = null, $disposed_to_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAllCommand';
        $request = $this->accountNumApiDispositionsGetRequest($account_num, $take, $skip, $include4473, $id, $external_id, $type, $ttsn, $otsn, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_disposition, $disposed_to_contact_id, $disposed_to_contact_external_id, $item_id, $item_external_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAllCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsGetAsync
     *
     * Retrieves the account's dispositions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include4473 If true, return both pending dispositions and dispositions tied to 4473s; otherwise, only return pending (non-4473) dispositions. Default is false. (optional)
     * @param  string $id Optional query parameter to search for a disposition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for a disposition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for dispositions with a specific disposition type. (optional)
     * @param  string $ttsn Optional query parameter to search for dispositions with a specific TTSN. (optional)
     * @param  string $otsn Optional query parameter to search for dispositions with a specific OTSN. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for dispositions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for dispositions with a specific invoice number (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for dispositions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_disposition Optional query parameter to specify whether an disposition is a manufacturing disposition.              true means search for manufacturing dispositions; false means search for non-manufacturing dispositions. (optional)
     * @param  string $disposed_to_contact_id Optional query parameter to search for dispositions by the dispose contact identifier. (optional)
     * @param  string $disposed_to_contact_external_id Optional query parameter to search for dispositions by the dispose contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for a disposition containing the item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for a disposition containing the item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsGetAsync($account_num, $take = null, $skip = null, $include4473 = null, $id = null, $external_id = null, $type = null, $ttsn = null, $otsn = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_disposition = null, $disposed_to_contact_id = null, $disposed_to_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        return $this->accountNumApiDispositionsGetAsyncWithHttpInfo($account_num, $take, $skip, $include4473, $id, $external_id, $type, $ttsn, $otsn, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_disposition, $disposed_to_contact_id, $disposed_to_contact_external_id, $item_id, $item_external_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsGetAsyncWithHttpInfo
     *
     * Retrieves the account's dispositions.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include4473 If true, return both pending dispositions and dispositions tied to 4473s; otherwise, only return pending (non-4473) dispositions. Default is false. (optional)
     * @param  string $id Optional query parameter to search for a disposition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for a disposition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for dispositions with a specific disposition type. (optional)
     * @param  string $ttsn Optional query parameter to search for dispositions with a specific TTSN. (optional)
     * @param  string $otsn Optional query parameter to search for dispositions with a specific OTSN. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for dispositions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for dispositions with a specific invoice number (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for dispositions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_disposition Optional query parameter to specify whether an disposition is a manufacturing disposition.              true means search for manufacturing dispositions; false means search for non-manufacturing dispositions. (optional)
     * @param  string $disposed_to_contact_id Optional query parameter to search for dispositions by the dispose contact identifier. (optional)
     * @param  string $disposed_to_contact_external_id Optional query parameter to search for dispositions by the dispose contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for a disposition containing the item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for a disposition containing the item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsGetAsyncWithHttpInfo($account_num, $take = null, $skip = null, $include4473 = null, $id = null, $external_id = null, $type = null, $ttsn = null, $otsn = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_disposition = null, $disposed_to_contact_id = null, $disposed_to_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAllCommand';
        $request = $this->accountNumApiDispositionsGetRequest($account_num, $take, $skip, $include4473, $id, $external_id, $type, $ttsn, $otsn, $purchase_order_number, $invoice_number, $shipment_tracking_number, $is_manufacturing_disposition, $disposed_to_contact_id, $disposed_to_contact_external_id, $item_id, $item_external_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsGet'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include4473 If true, return both pending dispositions and dispositions tied to 4473s; otherwise, only return pending (non-4473) dispositions. Default is false. (optional)
     * @param  string $id Optional query parameter to search for a disposition with a specific identifier. (optional)
     * @param  string $external_id Optional query parameter to search for a disposition with a specific external identifier. (optional)
     * @param  string $type Optional query parameter to search for dispositions with a specific disposition type. (optional)
     * @param  string $ttsn Optional query parameter to search for dispositions with a specific TTSN. (optional)
     * @param  string $otsn Optional query parameter to search for dispositions with a specific OTSN. (optional)
     * @param  string $purchase_order_number Optional query parameter to search for dispositions with a specific purchase order number. (optional)
     * @param  string $invoice_number Optional query parameter to search for dispositions with a specific invoice number (optional)
     * @param  string $shipment_tracking_number Optional query parameter to search for dispositions with a specific shipment tracking number. (optional)
     * @param  bool $is_manufacturing_disposition Optional query parameter to specify whether an disposition is a manufacturing disposition.              true means search for manufacturing dispositions; false means search for non-manufacturing dispositions. (optional)
     * @param  string $disposed_to_contact_id Optional query parameter to search for dispositions by the dispose contact identifier. (optional)
     * @param  string $disposed_to_contact_external_id Optional query parameter to search for dispositions by the dispose contact external identifier. (optional)
     * @param  string $item_id Optional query parameter to search for a disposition containing the item with the given identifier. (optional)
     * @param  string $item_external_id Optional query parameter to search for a disposition containing the item with the given external identifier. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsGetRequest($account_num, $take = null, $skip = null, $include4473 = null, $id = null, $external_id = null, $type = null, $ttsn = null, $otsn = null, $purchase_order_number = null, $invoice_number = null, $shipment_tracking_number = null, $is_manufacturing_disposition = null, $disposed_to_contact_id = null, $disposed_to_contact_external_id = null, $item_id = null, $item_external_id = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take, 'int32');
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($include4473 !== null) {
            $queryParams['include4473'] = ObjectSerializer::toQueryValue($include4473, null);
        }
        // query params
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id, 'uuid');
        }
        // query params
        if ($external_id !== null) {
            $queryParams['externalId'] = ObjectSerializer::toQueryValue($external_id, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($ttsn !== null) {
            $queryParams['TTSN'] = ObjectSerializer::toQueryValue($ttsn, null);
        }
        // query params
        if ($otsn !== null) {
            $queryParams['OTSN'] = ObjectSerializer::toQueryValue($otsn, null);
        }
        // query params
        if ($purchase_order_number !== null) {
            $queryParams['purchaseOrderNumber'] = ObjectSerializer::toQueryValue($purchase_order_number, null);
        }
        // query params
        if ($invoice_number !== null) {
            $queryParams['invoiceNumber'] = ObjectSerializer::toQueryValue($invoice_number, null);
        }
        // query params
        if ($shipment_tracking_number !== null) {
            $queryParams['shipmentTrackingNumber'] = ObjectSerializer::toQueryValue($shipment_tracking_number, null);
        }
        // query params
        if ($is_manufacturing_disposition !== null) {
            $queryParams['isManufacturingDisposition'] = ObjectSerializer::toQueryValue($is_manufacturing_disposition, null);
        }
        // query params
        if ($disposed_to_contact_id !== null) {
            $queryParams['disposedToContactId'] = ObjectSerializer::toQueryValue($disposed_to_contact_id, 'uuid');
        }
        // query params
        if ($disposed_to_contact_external_id !== null) {
            $queryParams['disposedToContactExternalId'] = ObjectSerializer::toQueryValue($disposed_to_contact_external_id, null);
        }
        // query params
        if ($item_id !== null) {
            $queryParams['itemId'] = ObjectSerializer::toQueryValue($item_id, 'uuid');
        }
        // query params
        if ($item_external_id !== null) {
            $queryParams['itemExternalId'] = ObjectSerializer::toQueryValue($item_external_id, null);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsGetByExternalIdExternalIdGet
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsGetByExternalIdExternalIdGet($external_id, $account_num)
    {
        list($response) = $this->accountNumApiDispositionsGetByExternalIdExternalIdGetWithHttpInfo($external_id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsGetByExternalIdExternalIdGetWithHttpInfo
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsGetByExternalIdExternalIdGetWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsGetByExternalIdExternalIdGetRequest($external_id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsGetByExternalIdExternalIdGetAsync
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsGetByExternalIdExternalIdGetAsync($external_id, $account_num)
    {
        return $this->accountNumApiDispositionsGetByExternalIdExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsGetByExternalIdExternalIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified disposition by External ID.
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsGetByExternalIdExternalIdGetAsyncWithHttpInfo($external_id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsGetByExternalIdExternalIdGetRequest($external_id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsGetByExternalIdExternalIdGet'
     *
     * @param  string $external_id The External ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsGetByExternalIdExternalIdGetRequest($external_id, $account_num)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiDispositionsGetByExternalIdExternalIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsGetByExternalIdExternalIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/GetByExternalId/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdAttachContactContactIdPut
     *
     * Attaches a contact to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $contact_id The ID of the contact to attach to the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdAttachContactContactIdPut($id, $contact_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdAttachContactContactIdPutWithHttpInfo($id, $contact_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdAttachContactContactIdPutWithHttpInfo
     *
     * Attaches a contact to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $contact_id The ID of the contact to attach to the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdAttachContactContactIdPutWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdAttachContactContactIdPutAsync
     *
     * Attaches a contact to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $contact_id The ID of the contact to attach to the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdAttachContactContactIdPutAsync($id, $contact_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdAttachContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdAttachContactContactIdPutAsyncWithHttpInfo
     *
     * Attaches a contact to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $contact_id The ID of the contact to attach to the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdAttachContactContactIdPutAsyncWithHttpInfo($id, $contact_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdAttachContactContactIdPut'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $contact_id The ID of the contact to attach to the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdAttachContactContactIdPutRequest($id, $contact_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling accountNumApiDispositionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdAttachContactContactIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdAttachContactContactIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/AttachContact/{contactId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contactId' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdCommitPost
     *
     * Commits the specified disposition.
     *
     * @param  string $id The ID of the disposition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitDispositionCommandResultCommittedDispositionModel
     */
    public function accountNumApiDispositionsIdCommitPost($id, $account_num, $x_audit_user, $list_disposed_items = null)
    {
        list($response) = $this->accountNumApiDispositionsIdCommitPostWithHttpInfo($id, $account_num, $x_audit_user, $list_disposed_items);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsIdCommitPostWithHttpInfo
     *
     * Commits the specified disposition.
     *
     * @param  string $id The ID of the disposition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitDispositionCommandResultCommittedDispositionModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdCommitPostWithHttpInfo($id, $account_num, $x_audit_user, $list_disposed_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitDispositionCommandResultCommittedDispositionModel';
        $request = $this->accountNumApiDispositionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_disposed_items);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitDispositionCommandResultCommittedDispositionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdCommitPostAsync
     *
     * Commits the specified disposition.
     *
     * @param  string $id The ID of the disposition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdCommitPostAsync($id, $account_num, $x_audit_user, $list_disposed_items = null)
    {
        return $this->accountNumApiDispositionsIdCommitPostAsyncWithHttpInfo($id, $account_num, $x_audit_user, $list_disposed_items)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdCommitPostAsyncWithHttpInfo
     *
     * Commits the specified disposition.
     *
     * @param  string $id The ID of the disposition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdCommitPostAsyncWithHttpInfo($id, $account_num, $x_audit_user, $list_disposed_items = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsCommitDispositionCommandResultCommittedDispositionModel';
        $request = $this->accountNumApiDispositionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_disposed_items);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdCommitPost'
     *
     * @param  string $id The ID of the disposition to commit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     * @param  bool $list_disposed_items &lt;br&gt;If true, returns an array of the disposed items, as well as the disposition Id and contact Id (if any).               Upon success, the response is a 200 OK.  &lt;br&gt;If false or not present in the query string, returns no response body. Upon success, the response              is a 204 No Content. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdCommitPostRequest($id, $account_num, $x_audit_user, $list_disposed_items = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdCommitPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdCommitPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdCommitPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Commit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($list_disposed_items !== null) {
            $queryParams['listDisposedItems'] = ObjectSerializer::toQueryValue($list_disposed_items, null);
        }
        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdDelete
     *
     * Deletes the specified disposition.
     *
     * @param  string $id The ID of the disposition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdDelete($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdDeleteWithHttpInfo
     *
     * Deletes the specified disposition.
     *
     * @param  string $id The ID of the disposition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdDeleteWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdDeleteRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdDeleteAsync
     *
     * Deletes the specified disposition.
     *
     * @param  string $id The ID of the disposition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdDeleteAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdDeleteAsyncWithHttpInfo
     *
     * Deletes the specified disposition.
     *
     * @param  string $id The ID of the disposition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdDeleteAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdDeleteRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdDelete'
     *
     * @param  string $id The ID of the disposition to delete. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdDeleteRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdGet
     *
     * Retrieves the specified disposition by unique ID.
     *
     * @param  string $id The ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsIdGet($id, $account_num)
    {
        list($response) = $this->accountNumApiDispositionsIdGetWithHttpInfo($id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsIdGetWithHttpInfo
     *
     * Retrieves the specified disposition by unique ID.
     *
     * @param  string $id The ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdGetWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsIdGetRequest($id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdGetAsync
     *
     * Retrieves the specified disposition by unique ID.
     *
     * @param  string $id The ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdGetAsync($id, $account_num)
    {
        return $this->accountNumApiDispositionsIdGetAsyncWithHttpInfo($id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdGetAsyncWithHttpInfo
     *
     * Retrieves the specified disposition by unique ID.
     *
     * @param  string $id The ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdGetAsyncWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsIdGetRequest($id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdGet'
     *
     * @param  string $id The ID of the disposition to retrieve. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdGetRequest($id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdDelete
     *
     * Removes an item from a disposition by disposition item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The disposition item ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdDelete($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdItemsDispositionItemIdDeleteWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdDeleteWithHttpInfo
     *
     * Removes an item from a disposition by disposition item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The disposition item ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdDeleteWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsDispositionItemIdDeleteRequest($id, $disposition_item_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdDeleteAsync
     *
     * Removes an item from a disposition by disposition item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The disposition item ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdDeleteAsync($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdItemsDispositionItemIdDeleteAsyncWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdDeleteAsyncWithHttpInfo
     *
     * Removes an item from a disposition by disposition item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The disposition item ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdDeleteAsyncWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsDispositionItemIdDeleteRequest($id, $disposition_item_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsDispositionItemIdDelete'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The disposition item ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsDispositionItemIdDeleteRequest($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsDispositionItemIdDelete'
            );
        }
        // verify the required parameter 'disposition_item_id' is set
        if ($disposition_item_id === null || (is_array($disposition_item_id) && count($disposition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disposition_item_id when calling accountNumApiDispositionsIdItemsDispositionItemIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsDispositionItemIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdItemsDispositionItemIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items/{dispositionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($disposition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispositionItemId' . '}',
                ObjectSerializer::toPathValue($disposition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdPut
     *
     * Edits an item's price for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdPut($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdItemsDispositionItemIdPutWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdPutWithHttpInfo
     *
     * Edits an item's price for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdPutWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsDispositionItemIdPutRequest($id, $disposition_item_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdPutAsync
     *
     * Edits an item's price for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdPutAsync($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdItemsDispositionItemIdPutAsyncWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsDispositionItemIdPutAsyncWithHttpInfo
     *
     * Edits an item's price for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsDispositionItemIdPutAsyncWithHttpInfo($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsDispositionItemIdPutRequest($id, $disposition_item_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsDispositionItemIdPut'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $disposition_item_id The ID of the item to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsDispositionItemIdPutRequest($id, $disposition_item_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsDispositionItemIdPut'
            );
        }
        // verify the required parameter 'disposition_item_id' is set
        if ($disposition_item_id === null || (is_array($disposition_item_id) && count($disposition_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $disposition_item_id when calling accountNumApiDispositionsIdItemsDispositionItemIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsDispositionItemIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdItemsDispositionItemIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items/{dispositionItemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($disposition_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispositionItemId' . '}',
                ObjectSerializer::toPathValue($disposition_item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsGet
     *
     * Retrieves the items for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetItemsCommand
     */
    public function accountNumApiDispositionsIdItemsGet($id, $account_num)
    {
        list($response) = $this->accountNumApiDispositionsIdItemsGetWithHttpInfo($id, $account_num);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsIdItemsGetWithHttpInfo
     *
     * Retrieves the items for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetItemsCommand, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsGetWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetItemsCommand';
        $request = $this->accountNumApiDispositionsIdItemsGetRequest($id, $account_num);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetItemsCommand',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsGetAsync
     *
     * Retrieves the items for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsGetAsync($id, $account_num)
    {
        return $this->accountNumApiDispositionsIdItemsGetAsyncWithHttpInfo($id, $account_num)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsGetAsyncWithHttpInfo
     *
     * Retrieves the items for the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsGetAsyncWithHttpInfo($id, $account_num)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetItemsCommand';
        $request = $this->accountNumApiDispositionsIdItemsGetRequest($id, $account_num);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsGet'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsGetRequest($id, $account_num)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsGet'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsPost
     *
     * Add items to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdItemsPost($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdItemsPostWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdItemsPostWithHttpInfo
     *
     * Add items to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsPostWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsPostRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsPostAsync
     *
     * Add items to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsPostAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdItemsPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsPostAsyncWithHttpInfo
     *
     * Add items to the specified disposition.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsPostAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsPostRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsPost'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsPostRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsPost'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdItemsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete
     *
     * Removes an item from a disposition by item ExternalId.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_external_id The ExternalId of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete($id, $item_external_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteWithHttpInfo($id, $item_external_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteWithHttpInfo
     *
     * Removes an item from a disposition by item ExternalId.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_external_id The ExternalId of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteWithHttpInfo($id, $item_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteRequest($id, $item_external_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteAsync
     *
     * Removes an item from a disposition by item ExternalId.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_external_id The ExternalId of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteAsync($id, $item_external_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteAsyncWithHttpInfo($id, $item_external_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteAsyncWithHttpInfo
     *
     * Removes an item from a disposition by item ExternalId.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_external_id The ExternalId of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteAsyncWithHttpInfo($id, $item_external_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteRequest($id, $item_external_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_external_id The ExternalId of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDeleteRequest($id, $item_external_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete'
            );
        }
        // verify the required parameter 'item_external_id' is set
        if ($item_external_id === null || (is_array($item_external_id) && count($item_external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_external_id when calling accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdItemsRemoveByExternalIdItemExternalIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items/RemoveByExternalId/{itemExternalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item_external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemExternalId' . '}',
                ObjectSerializer::toPathValue($item_external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveItemIdDelete
     *
     * Removes an item from a disposition by item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_id The ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdItemsRemoveItemIdDelete($id, $item_id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdItemsRemoveItemIdDeleteWithHttpInfo($id, $item_id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveItemIdDeleteWithHttpInfo
     *
     * Removes an item from a disposition by item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_id The ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdItemsRemoveItemIdDeleteWithHttpInfo($id, $item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsRemoveItemIdDeleteRequest($id, $item_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveItemIdDeleteAsync
     *
     * Removes an item from a disposition by item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_id The ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsRemoveItemIdDeleteAsync($id, $item_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdItemsRemoveItemIdDeleteAsyncWithHttpInfo($id, $item_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdItemsRemoveItemIdDeleteAsyncWithHttpInfo
     *
     * Removes an item from a disposition by item ID.
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_id The ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdItemsRemoveItemIdDeleteAsyncWithHttpInfo($id, $item_id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdItemsRemoveItemIdDeleteRequest($id, $item_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdItemsRemoveItemIdDelete'
     *
     * @param  string $id The ID of the disposition. (required)
     * @param  string $item_id The ID of the item to remove from the disposition. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdItemsRemoveItemIdDeleteRequest($id, $item_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdItemsRemoveItemIdDelete'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling accountNumApiDispositionsIdItemsRemoveItemIdDelete'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdItemsRemoveItemIdDelete'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdItemsRemoveItemIdDelete'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}/Items/Remove/{itemId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'itemId' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsIdPut
     *
     * Edits the specified disposition.
     *
     * @param  string $id The ID of the disposition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function accountNumApiDispositionsIdPut($id, $account_num, $x_audit_user)
    {
        $this->accountNumApiDispositionsIdPutWithHttpInfo($id, $account_num, $x_audit_user);
    }

    /**
     * Operation accountNumApiDispositionsIdPutWithHttpInfo
     *
     * Edits the specified disposition.
     *
     * @param  string $id The ID of the disposition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsIdPutWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdPutRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsIdPutAsync
     *
     * Edits the specified disposition.
     *
     * @param  string $id The ID of the disposition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdPutAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsIdPutAsyncWithHttpInfo
     *
     * Edits the specified disposition.
     *
     * @param  string $id The ID of the disposition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '';
        $request = $this->accountNumApiDispositionsIdPutRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsIdPut'
     *
     * @param  string $id The ID of the disposition to edit. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsIdPutRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsLockByExternalIdExternalIdPut
     *
     * Creates a new 4473 and attaches the pending disposition to it.
     *
     * @param  string $external_id The ExternalId of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel
     */
    public function accountNumApiDispositionsLockByExternalIdExternalIdPut($external_id, $account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsLockByExternalIdExternalIdPutWithHttpInfo($external_id, $account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsLockByExternalIdExternalIdPutWithHttpInfo
     *
     * Creates a new 4473 and attaches the pending disposition to it.
     *
     * @param  string $external_id The ExternalId of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsLockByExternalIdExternalIdPutWithHttpInfo($external_id, $account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel';
        $request = $this->accountNumApiDispositionsLockByExternalIdExternalIdPutRequest($external_id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsLockByExternalIdExternalIdPutAsync
     *
     * Creates a new 4473 and attaches the pending disposition to it.
     *
     * @param  string $external_id The ExternalId of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsLockByExternalIdExternalIdPutAsync($external_id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsLockByExternalIdExternalIdPutAsyncWithHttpInfo($external_id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsLockByExternalIdExternalIdPutAsyncWithHttpInfo
     *
     * Creates a new 4473 and attaches the pending disposition to it.
     *
     * @param  string $external_id The ExternalId of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsLockByExternalIdExternalIdPutAsyncWithHttpInfo($external_id, $account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel';
        $request = $this->accountNumApiDispositionsLockByExternalIdExternalIdPutRequest($external_id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsLockByExternalIdExternalIdPut'
     *
     * @param  string $external_id The ExternalId of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsLockByExternalIdExternalIdPutRequest($external_id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'external_id' is set
        if ($external_id === null || (is_array($external_id) && count($external_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_id when calling accountNumApiDispositionsLockByExternalIdExternalIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsLockByExternalIdExternalIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsLockByExternalIdExternalIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/LockByExternalId/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($external_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($external_id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsLockIdPut
     *
     * Creates a new 4473 and assigns the pending disposition to it.
     *
     * @param  string $id The Id of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel
     */
    public function accountNumApiDispositionsLockIdPut($id, $account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsLockIdPutWithHttpInfo($id, $account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsLockIdPutWithHttpInfo
     *
     * Creates a new 4473 and assigns the pending disposition to it.
     *
     * @param  string $id The Id of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsLockIdPutWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel';
        $request = $this->accountNumApiDispositionsLockIdPutRequest($id, $account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsLockIdPutAsync
     *
     * Creates a new 4473 and assigns the pending disposition to it.
     *
     * @param  string $id The Id of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsLockIdPutAsync($id, $account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsLockIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsLockIdPutAsyncWithHttpInfo
     *
     * Creates a new 4473 and assigns the pending disposition to it.
     *
     * @param  string $id The Id of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsLockIdPutAsyncWithHttpInfo($id, $account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsLockDispositionCommandResultSuccessResultModel';
        $request = $this->accountNumApiDispositionsLockIdPutRequest($id, $account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsLockIdPut'
     *
     * @param  string $id The Id of the disposition to attach to the newly-created 4473. (required)
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsLockIdPutRequest($id, $account_num, $x_audit_user)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling accountNumApiDispositionsLockIdPut'
            );
        }
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsLockIdPut'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsLockIdPut'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/Lock/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsNFAPost
     *
     * Creates a new NFA disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsNFAPost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsNFAPostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsNFAPostWithHttpInfo
     *
     * Creates a new NFA disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsNFAPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsNFAPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsNFAPostAsync
     *
     * Creates a new NFA disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsNFAPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsNFAPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsNFAPostAsyncWithHttpInfo
     *
     * Creates a new NFA disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsNFAPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsNFAPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsNFAPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsNFAPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsNFAPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsNFAPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/NFA';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsOnly4473sGet
     *
     * Retrieves the account's dispositions that are tied to 4473s. Regular dispositions are not included.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include_awaiting4473_completion If true, return both Pending and Awaiting Form 4473 Completion dispositions tied to 4473s;              otherwise, only return Pending 4473 dispositions. Default is false. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAll4473Command
     */
    public function accountNumApiDispositionsOnly4473sGet($account_num, $take = null, $skip = null, $include_awaiting4473_completion = null)
    {
        list($response) = $this->accountNumApiDispositionsOnly4473sGetWithHttpInfo($account_num, $take, $skip, $include_awaiting4473_completion);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsOnly4473sGetWithHttpInfo
     *
     * Retrieves the account's dispositions that are tied to 4473s. Regular dispositions are not included.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include_awaiting4473_completion If true, return both Pending and Awaiting Form 4473 Completion dispositions tied to 4473s;              otherwise, only return Pending 4473 dispositions. Default is false. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAll4473Command, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsOnly4473sGetWithHttpInfo($account_num, $take = null, $skip = null, $include_awaiting4473_completion = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAll4473Command';
        $request = $this->accountNumApiDispositionsOnly4473sGetRequest($account_num, $take, $skip, $include_awaiting4473_completion);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAll4473Command',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsOnly4473sGetAsync
     *
     * Retrieves the account's dispositions that are tied to 4473s. Regular dispositions are not included.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include_awaiting4473_completion If true, return both Pending and Awaiting Form 4473 Completion dispositions tied to 4473s;              otherwise, only return Pending 4473 dispositions. Default is false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsOnly4473sGetAsync($account_num, $take = null, $skip = null, $include_awaiting4473_completion = null)
    {
        return $this->accountNumApiDispositionsOnly4473sGetAsyncWithHttpInfo($account_num, $take, $skip, $include_awaiting4473_completion)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsOnly4473sGetAsyncWithHttpInfo
     *
     * Retrieves the account's dispositions that are tied to 4473s. Regular dispositions are not included.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include_awaiting4473_completion If true, return both Pending and Awaiting Form 4473 Completion dispositions tied to 4473s;              otherwise, only return Pending 4473 dispositions. Default is false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsOnly4473sGetAsyncWithHttpInfo($account_num, $take = null, $skip = null, $include_awaiting4473_completion = null)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetAll4473Command';
        $request = $this->accountNumApiDispositionsOnly4473sGetRequest($account_num, $take, $skip, $include_awaiting4473_completion);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsOnly4473sGet'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  int $take Optional query parameter to specify the number of dispositions to return. (optional)
     * @param  int $skip Optional query parameter to specify how many pages to skip. (optional)
     * @param  bool $include_awaiting4473_completion If true, return both Pending and Awaiting Form 4473 Completion dispositions tied to 4473s;              otherwise, only return Pending 4473 dispositions. Default is false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsOnly4473sGetRequest($account_num, $take = null, $skip = null, $include_awaiting4473_completion = null)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsOnly4473sGet'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/Only4473s';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($take !== null) {
            $queryParams['take'] = ObjectSerializer::toQueryValue($take, 'int32');
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = ObjectSerializer::toQueryValue($skip, 'int32');
        }
        // query params
        if ($include_awaiting4473_completion !== null) {
            $queryParams['includeAwaiting4473Completion'] = ObjectSerializer::toQueryValue($include_awaiting4473_completion, null);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsPost
     *
     * Creates a new disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsPost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsPostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsPostWithHttpInfo
     *
     * Creates a new disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsPostAsync
     *
     * Creates a new disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsPostAsyncWithHttpInfo
     *
     * Creates a new disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountNumApiDispositionsTheftLossPost
     *
     * Creates a new Theft/Loss disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel
     */
    public function accountNumApiDispositionsTheftLossPost($account_num, $x_audit_user)
    {
        list($response) = $this->accountNumApiDispositionsTheftLossPostWithHttpInfo($account_num, $x_audit_user);
        return $response;
    }

    /**
     * Operation accountNumApiDispositionsTheftLossPostWithHttpInfo
     *
     * Creates a new Theft/Loss disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountNumApiDispositionsTheftLossPostWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsTheftLossPostRequest($account_num, $x_audit_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\FastBoundWebModelsApiV1ErrorResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountNumApiDispositionsTheftLossPostAsync
     *
     * Creates a new Theft/Loss disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsTheftLossPostAsync($account_num, $x_audit_user)
    {
        return $this->accountNumApiDispositionsTheftLossPostAsyncWithHttpInfo($account_num, $x_audit_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation accountNumApiDispositionsTheftLossPostAsyncWithHttpInfo
     *
     * Creates a new Theft/Loss disposition.
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountNumApiDispositionsTheftLossPostAsyncWithHttpInfo($account_num, $x_audit_user)
    {
        $returnType = '\Swagger\Client\Model\FastBoundWebModelsApiV1DispositionsGetDispositionResponseModel';
        $request = $this->accountNumApiDispositionsTheftLossPostRequest($account_num, $x_audit_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'accountNumApiDispositionsTheftLossPost'
     *
     * @param  string $account_num The assigned account number. (required)
     * @param  string $x_audit_user Email address of a FastBound user who has access to the specified account for audit purposes. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountNumApiDispositionsTheftLossPostRequest($account_num, $x_audit_user)
    {
        // verify the required parameter 'account_num' is set
        if ($account_num === null || (is_array($account_num) && count($account_num) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_num when calling accountNumApiDispositionsTheftLossPost'
            );
        }
        // verify the required parameter 'x_audit_user' is set
        if ($x_audit_user === null || (is_array($x_audit_user) && count($x_audit_user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_audit_user when calling accountNumApiDispositionsTheftLossPost'
            );
        }

        $resourcePath = '/{accountNum}/api/Dispositions/TheftLoss';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_audit_user !== null) {
            $headerParams['X-AuditUser'] = ObjectSerializer::toHeaderValue($x_audit_user);
        }

        // path params
        if ($account_num !== null) {
            $resourcePath = str_replace(
                '{' . 'accountNum' . '}',
                ObjectSerializer::toPathValue($account_num),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
